[
  {
    "block": "arrow",
    "jsdoc": [
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "nb-block"
          }
        ],
        "description": {
          "full": "<p>Add a shadow to wrapper and hide info about requests</p><pre><code>arrow.focus()\n</code></pre>",
          "summary": "<p>Add a shadow to wrapper and hide info about requests</p>",
          "body": "<pre><code>arrow.focus()\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "focus: function() {\n        if (!this.$wrap.hasClass('nb-arrow__name__wrap_focus')) {\n            this.$wrap.addClass('nb-arrow__name__wrap_focus');\n        }\n        this.$requests.fadeOut('fast');\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "nb-block"
          }
        ],
        "description": {
          "full": "<p>Remove a shadow from wrapper and show info about requests</p><pre><code>arrow.blur();\n</code></pre>",
          "summary": "<p>Remove a shadow from wrapper and show info about requests</p>",
          "body": "<pre><code>arrow.blur();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "blur: function() {\n        this.$wrap.removeClass('nb-arrow__name__wrap_focus');\n        this.$node.find('.nb-arrow__input_fake').text(this.$node.find('.nb-input').attr('value'));\n        this.$requests.fadeIn('fast');\n        return this;\n    }\n}, 'base');"
      }
    ],
    "md": "<h3 id=\"default-arrow\">Default arrow</h3>\n<blockquote>\n<div example=\"arrow-default\"><br></div>\n\n<div class=\"code code_yate\"><pre><code>nb-arrow()</code></pre></div></blockquote>\n<ul>\n<li>search: &#39;true&#39;</li>\n<li>buttonContent: &#39;Найти&#39;</li>\n</ul>\n<h3 id=\"options\">Options</h3>\n<ul>\n<li>search: true() — display search form</li>\n<li>href: ... — URL for service arrow link</li>\n<li>action: ... — action URL for search form</li>\n<li>text: ... — text for service arrow or link rendered before search input</li>\n<li>buttonContent: ... — text for form field&#39;s &#39;submit&#39; button</li>\n<li>inputTabindex</li>\n<li>buttonTabindex </li>\n<li>value: ... — placeholder for search field</li>\n<li>requests: ... — info about unber of request with this search field</li>\n</ul>\n<h3 id=\"yate-examples\">Yate examples</h3>\n<p>Name of service:</p>\n<blockquote>\n<div example=\"arrow-service\"><br></div>\n\n<div class=\"code code_yate\"><pre><code>nb-arrow({\n    'search': 'false'\n    'text': Disk'\n})</code></pre></div></blockquote>\n<p>Name of service with link:</p>\n<blockquote>\n<div example=\"arrow-service-link\"><br></div>\n\n<div class=\"code code_yate\"><pre><code>nb-arrow({\n    'search': 'false'\n    'href': '#'\n    'text': Disk'\n})</code></pre></div></blockquote>\n<p>Arrow with search form, prefilled and with requests info:</p>\n<blockquote>\n<div example=\"arrow-search-requests\"><br></div>\n\n<div class=\"code code_yate\"><pre><code>nb-arrow({\n     'requests': '8 results'\n     'attrs': {\n       'action': '/search.php'\n     }\n     'buttonContent': 'I\\'m feeling lucky'\n     'value': 'Dog'\n})</code></pre></div></blockquote>\n<p>Arrow with search form and namelink enabled:</p>\n<blockquote>\n<div  example=\"arrow-search-service\"><br></div>\n\n<div class=\"code code_yate\"><pre><code>nb-arrow({\n    'href': '#'\n    'text': Disk'\n})</code></pre></div></blockquote>\n"
  },
  {
    "block": "button",
    "jsdoc": [
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "text",
            "description": "- text for the button"
          },
          {
            "type": "fires",
            "string": "'nb-content-set'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "block for chaining"
          }
        ],
        "description": {
          "full": "<p>Set text of the button</p><pre><code>    button.setContent(&#39;Hello, world!&#39;);\n</code></pre>",
          "summary": "<p>Set text of the button</p>",
          "body": "<pre><code>    button.setContent(&#39;Hello, world!&#39;);\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setContent: function(text) {\n        if (this.$node && this.$node.data('uiButton')) {\n            this.$node.find('._nb-button-content').html(text);\n            this.trigger('nb-text-set', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "String"
            ],
            "description": "text of the button"
          }
        ],
        "description": {
          "full": "<p>Get text of the button</p><pre><code>    button.setText(&#39;Hello, world!&#39;);\n    button.getText(); // --&gt; &#39;Hello, world!&#39;\n</code></pre>",
          "summary": "<p>Get text of the button</p>",
          "body": "<pre><code>    button.setText(&#39;Hello, world!&#39;);\n    button.getText(); // --&gt; &#39;Hello, world!&#39;\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getContent: function() {\n        return this.$node.find('._nb-button-content').html();\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "href",
            "description": "- link for the button"
          },
          {
            "type": "fires",
            "string": "'nb-url-set'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "block for chaining"
          }
        ],
        "description": {
          "full": "<p>Set href of the link button</p><pre><code>button.setUrl(&#39;yandex.ru&#39;);\n</code></pre>",
          "summary": "<p>Set href of the link button</p>",
          "body": "<pre><code>button.setUrl(&#39;yandex.ru&#39;);\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setUrl: function(href) {\n        this.$node.attr('href', href);\n        this.trigger('nb-url-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "String"
            ],
            "description": "text of the button"
          }
        ],
        "description": {
          "full": "<p>Get href of the link button</p><pre><code>button.setUrl(&#39;yandex.ru&#39;);\nbutton.getUrl(); // --&gt; yandex.ru\n</code></pre>",
          "summary": "<p>Get href of the link button</p>",
          "body": "<pre><code>button.setUrl(&#39;yandex.ru&#39;);\nbutton.getUrl(); // --&gt; yandex.ru\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getUrl: function() {\n        return this.$node.attr('href');\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-disabled'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "blocks for chaining"
          }
        ],
        "description": {
          "full": "<p>Disable the button</p><pre><code>button.disable();\n</code></pre>",
          "summary": "<p>Disable the button</p>",
          "body": "<pre><code>button.disable();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "disable: function() {\n        if (this.$node && this.$node.data('uiButton')) {\n            this.$node.button('disable');\n            this._tabindex = this.$node.attr('tabindex');\n            this.$node.attr('tabindex', '-1');\n            this.$node.addClass('_nb-is-disabled');\n            this.trigger('nb-disabled', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-enabled'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "blocks for chaining"
          }
        ],
        "description": {
          "full": "<p>Enables the button</p><pre><code>button.enable();\n</code></pre>",
          "summary": "<p>Enables the button</p>",
          "body": "<pre><code>button.enable();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "enable: function() {\n        if (this.$node && this.$node.data('uiButton')) {\n            this.$node.button('enable');\n            this.$node.attr('tabindex', this._tabindex || '0');\n            this.$node.removeClass('_nb-is-disabled');\n            this.trigger('nb-enabled', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "Boolean"
            ],
            "description": ""
          }
        ],
        "description": {
          "full": "<p>Return state of the button</p><pre><code>button.isEnabled(); // --&gt; true (by default)\n\nbutton.disable();\nbutton.isEnabled(); // --&gt; false\n</code></pre>",
          "summary": "<p>Return state of the button</p>",
          "body": "<pre><code>button.isEnabled(); // --&gt; true (by default)\n\nbutton.disable();\nbutton.isEnabled(); // --&gt; false\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isEnabled: function() {\n        return !this.$node.prop(\"disabled\");\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-focus'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "blocks for chaining"
          }
        ],
        "description": {
          "full": "<p>Focus the button</p><pre><code>button.focus();\n</code></pre>",
          "summary": "<p>Focus the button</p>",
          "body": "<pre><code>button.focus();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "focus: function() {\n        if (this.isEnabled()) {\n            this.$node.focus();\n        }\n        this.trigger('nb-focused', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-blured'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "blocks for chaining"
          }
        ],
        "description": {
          "full": "<p>Blur the button</p><pre><code>button.blur();\n</code></pre>",
          "summary": "<p>Blur the button</p>",
          "body": "<pre><code>button.blur();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "blur: function() {\n        if (this.isEnabled()) {\n            this.$node.blur();\n        }\n        this.trigger('nb-blured', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-destroyed'"
          }
        ],
        "description": {
          "full": "<p>Destroy the button</p><pre><code>button.destroy();\n</code></pre>",
          "summary": "<p>Destroy the button</p>",
          "body": "<pre><code>button.destroy();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "destroy: function() {\n        // вызвали destroy в одном методе, но ссылка на кнопку была сохранена в другом\n        // в результате повторный вызов и ошибка в консоли\n        if (this.$node && this.$node.data('uiButton')) {\n            this.$node.button('destroy');\n        }\n        this.trigger('nb-destroyed', this);\n        this.nbdestroy();\n    }\n}, 'base');"
      }
    ],
    "md": "<h3 id=\"default-button\">Default button</h3>\n<blockquote>\n<div example=\"button-default\"><br></div>\n\n<div class=\"code code_yate\"><pre><code>nb-button({\n    'content': 'Button'\n})</code></pre></div></blockquote>\n<ul>\n<li><code>size: m</code></li>\n<li><code>theme: normal</code></li>\n</ul>\n<h3 id=\"optional-attributes\">Optional attributes</h3>\n<ul>\n<li><code>&#39;size&#39;</code> {string} <code>&#39;s&#39; / &#39;m&#39; / &#39;l&#39;</code></li>\n<li><code>&#39;theme&#39;</code> {string} <code>&#39;normal&#39; / &#39;action&#39; (yellow) / &#39;dark&#39; / &#39;pseudo&#39; / &#39;pseudo-inverted&#39; / &#39;promo&#39; (big yellow)</code></li>\n<li><code>&#39;id&#39;</code> {string} ...</li>\n<li><code>&#39;name&#39;</code> {string} ...</li>\n<li><code>&#39;class&#39;</code> {array} <code>[&#39;my_class1&#39;, &#39;my_class2&#39;]</code> — additional classes</li>\n<li><code>&#39;disabled&#39;</code> {boolean} — disabled button</li>\n<li><code>&#39;tabindex&#39;</code> {string}</li>\n<li><code>&#39;icon&#39;</code> {string} ... — link to icon</li>\n<li><code>&#39;iconText&#39;</code> {string} ... — symbol for icon</li>\n<li><code>&#39;content&#39;</code> {string} ... — content of button</li>\n<li><code>&#39;attrs&#39;</code> {object} <code>{&#39;type&#39;: &#39;submit&#39;, &#39;attr2: &#39;value2&#39; }</code> — custom DOM attributes for button</li>\n<li><code>&#39;static&#39;</code> {boolean} — block without nanoblocks functionality (JavaScript API)</li>\n<li><code>&#39;type&#39;</code> {string}<ul>\n<li><code>&#39;file&#39;</code> — attach button. This is not DOM type aka <code>&lt;input type=&quot;&quot;/&gt;</code>, this is instance type.</li>\n<li><code>&#39;link&#39;</code> — <code>&lt;a&gt;</code></li>\n<li><code>&#39;label&#39;</code> - <code>&lt;label&gt;</code></li>\n<li><code>&#39;inline&#39;</code> - <code>&lt;span&gt;</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"yate-examples\">Yate examples</h3>\n<h4 id=\"types\">Types</h4>\n<p><code>&#39;type&#39;: &#39;link&#39;  &#39;label&#39;  &#39;inline&#39;  &#39;file&#39;</code></p>\n<blockquote>\n<div example=\"buttons-type\"><br></div>\n\n<div class=\"code code_yate\"><pre><code>nb-button({\n    'content': 'Link button'\n    'type': 'link'\n    'attrs': {\n        'href': '#'\n    }\n})\n' '\nnb-button({\n    'content': 'Label button'\n    'type': 'label'\n    'attrs': {\n        'for': 'blah'\n    }\n})\n' '\nnb-button({\n    'content': 'Span button'\n    'type': 'inline'\n})\n' '\nnb-button({\n     'content': 'Attach file'\n     'type': 'file'\n})</code></pre></div></blockquote>\n<h4 id=\"size\">Size</h4>\n<blockquote>\n<div example=\"buttons-size\" ><br></div>\n\n<div class=\"code code_yate\"><pre><code>nb-button({\n    'content': 'Small'\n    'size': 's'\n})\n' '\nnb-button({\n   'content': 'Medium'\n})\n' '\nnb-button({\n   'theme': 'promo'\n   'content': 'Large'\n})\n' '\nnb-button({\n   'theme': 'promo'\n   'size': 'xl'\n   'content': 'Extra large'\n})</code></pre></div></blockquote>\n<h4 id=\"themes\">Themes</h4>\n<p><code>&#39;theme&#39;: &#39;action&#39;  &#39;pseudo&#39;  &#39;dark&#39;  &#39;promo&#39;</code></p>\n<blockquote>\n<div example=\"buttons-theme\" ><br></div>\n\n<div class=\"code code_yate\"><pre><code>nb-button({\n    'content': 'Action'\n    'theme': 'action'\n})\n' '\nnb-button({\n    'content': 'Pseudo'\n    'theme': 'pseudo'\n})\n' '\nnb-button({\n    'content': 'Dark'\n    'theme': 'dark'\n})\n\n' '\nnb-button({\n    'content': 'Promo'\n    'theme': 'promo'\n})</code></pre></div></blockquote>\n<h4 id=\"icons\">Icons</h4>\n<blockquote>\n<div example=\"buttons-icon\" ><br></div>\n\n<div class=\"code code_yate\"><pre><code>nb-button({\n    'icon': 'eye'\n})\n\n' '\nnb-button({\n    'iconText': '▼'\n})\n\n' '\nnb-button({\n      'icon': 'link'\n      'content': 'Открыть'\n})</code></pre></div></blockquote>\n<h4 id=\"disabled\">Disabled</h4>\n<blockquote>\n<div example=\"button-disabled\" ><br></div>\n\n<div class=\"code code_yate\"><pre><code>nb-button({\n  'disabled': true()\n  'content': 'Disabled'\n}</code></pre></div></blockquote>\n"
  },
  {
    "block": "checkbox",
    "jsdoc": [
      {
        "tags": [
          {
            "type": "augments",
            "otherClass": "nb.block.Base"
          }
        ],
        "description": {
          "full": "<p>@class nb.block.Checkbox</p>",
          "summary": "<p>@class nb.block.Checkbox</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "nb.define('checkbox', {\n    events: {\n        'change input': 'onchange'\n    },\n\n    _onCheckboxChecked: function(evtName, params) {\n        if (params.name == this.getName() && params.value != this.getValue()) {\n            this.uncheck();\n        }\n    },\n\n    onchange: function() {\n        if (this.$control.prop('checked')) {\n            this.check();\n        } else {\n            this.uncheck();\n        }\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-inited'"
          },
          {
            "type": "constructor",
            "string": ""
          }
        ],
        "description": {
          "full": "<p>Init a checkbox</p>",
          "summary": "<p>Init a checkbox</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "oninit: function() {\n        this.$control = this.$node.find('input[type]');\n        this._isChecked = this.$control.prop('checked');\n\n        this.$control.on('click.nb-checkbox', function(evt) {\n            evt.stopPropagation();\n        });\n\n        // emulates \"change\" event for IE<9\n        // IE<9 triggers \"change\" only after \"blur\"\n        if (document['documentMode'] && document['documentMode'] < 9) {\n            var that = this;\n            this.$control.on('propertychange.nb-checkbox', function(e) {\n                if (e.originalEvent.propertyName === 'checked') {\n                    that.onchange();\n                }\n            });\n        }\n\n        if (this.getType() === 'radio') {\n            nb.on('checkbox:checked', $.proxy(this._onCheckboxChecked, this));\n        }\n\n        this.trigger('nb-inited', this);\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String} — type of control"
          }
        ],
        "description": {
          "full": "<p>Override base getType()</p><pre><code>checkbox.getType(); // --&gt; checkbox | radio\n</code></pre>",
          "summary": "<p>Override base getType()</p>",
          "body": "<pre><code>checkbox.getType(); // --&gt; checkbox | radio\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getType: function() {\n        return this.$control.attr('type');\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Boolean}"
          }
        ],
        "description": {
          "full": "<p>Return check state of the checkbox or radio</p><pre><code>checkbox.isChecked(); // --&gt; false (by default)\n\ncheckbox.check();\ncheckbox.isChecked(); // --&gt; true\n</code></pre>",
          "summary": "<p>Return check state of the checkbox or radio</p>",
          "body": "<pre><code>checkbox.isChecked(); // --&gt; false (by default)\n\ncheckbox.check();\ncheckbox.isChecked(); // --&gt; true\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isChecked: function() {\n        return this._isChecked;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-checked', 'nb-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Checking checkbox or radio</p><pre><code>checkbox.check();\n</code></pre>",
          "summary": "<p>Checking checkbox or radio</p>",
          "body": "<pre><code>checkbox.check();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "check: function() {\n        if (!this.isEnabled()) {\n            return this;\n        }\n        if (this.getType() === 'radio') {\n            nb.trigger('checkbox:checked', {\n                name: this.getName(),\n                value: this.getValue()\n            });\n        }\n\n        var isChecked = this.isChecked();\n\n        this.$control.prop({\n            'indeterminate': false,\n            'checked': true\n        });\n\n        this._isChecked = true;\n        this.trigger('nb-checked', this);\n\n        if (!isChecked) {\n            this.trigger('nb-changed', this);\n        }\n\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-unchecked', 'nb-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Unchecking checkbox or radio</p><pre><code>checkbox.uncheck();\n</code></pre>",
          "summary": "<p>Unchecking checkbox or radio</p>",
          "body": "<pre><code>checkbox.uncheck();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "uncheck: function() {\n        if (!this.isEnabled()) {\n            return this;\n        }\n\n        var isChecked = this.isChecked();\n\n        this.$control.prop({\n            'indeterminate': false,\n            'checked': false\n        });\n\n        this._isChecked = false;\n        this.trigger('nb-unchecked', this);\n\n        if (isChecked) {\n            this.trigger('nb-changed', this);\n        }\n\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'change'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "nb.block"
          }
        ],
        "description": {
          "full": "<p>Toggle to the opposite state checkbox or radio</p><pre><code>checkbox.toggle();\n</code></pre>",
          "summary": "<p>Toggle to the opposite state checkbox or radio</p>",
          "body": "<pre><code>checkbox.toggle();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "toggle: function() {\n        if (!this.isEnabled()) {\n            return this;\n        }\n\n        this.trigger('nb-change', this);\n\n        if (this.isChecked()) {\n            this.uncheck();\n        } else {\n            this.check();\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Boolean}"
          }
        ],
        "description": {
          "full": "<p>Return indeterminate state of the checkbox or radio</p><pre><code>checkbox.isIndeterminate();\n</code></pre>",
          "summary": "<p>Return indeterminate state of the checkbox or radio</p>",
          "body": "<pre><code>checkbox.isIndeterminate();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isIndeterminate: function() {\n        return this.$control.prop('indeterminate');\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-indeterminated'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set indeterminate state of the checkbox or radio</p><pre><code>checkbox.setIndeterminate();\n</code></pre>",
          "summary": "<p>Set indeterminate state of the checkbox or radio</p>",
          "body": "<pre><code>checkbox.setIndeterminate();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setIndeterminate: function() {\n        if (this.isEnabled()) {\n            this.$control.prop('indeterminate', true);\n            this.trigger('nb-indeterminated', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-determinated'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set determinate state of the checkbox or radio</p><pre><code>checkbox.setDeterminate();\n</code></pre>",
          "summary": "<p>Set determinate state of the checkbox or radio</p>",
          "body": "<pre><code>checkbox.setDeterminate();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setDeterminate: function() {\n        if (this.isEnabled()) {\n            this.$control.prop('indeterminate', false);\n            this.trigger('nb-determinated', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Boolean}"
          }
        ],
        "description": {
          "full": "<p>Return enable state of the checkbox or radio</p><pre><code>checkbox.isEnabled();\n</code></pre>",
          "summary": "<p>Return enable state of the checkbox or radio</p>",
          "body": "<pre><code>checkbox.isEnabled();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isEnabled: function() {\n        return !this.$control.prop('disabled');\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-enabled'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Enable the checkbox or radio</p><pre><code>checkbox.enable();\n</code></pre>",
          "summary": "<p>Enable the checkbox or radio</p>",
          "body": "<pre><code>checkbox.enable();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "enable: function() {\n        if (!this.isEnabled()) {\n            this.$node.removeClass('_nb-is-disabled');\n            this.$control.removeAttr('disabled');\n            this.trigger('nb-enabled', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-disabled'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Disable the checkbox or radio</p><pre><code>checkbox.disable();\n</code></pre>",
          "summary": "<p>Disable the checkbox or radio</p>",
          "body": "<pre><code>checkbox.disable();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "disable: function() {\n        if (this.isEnabled()) {\n            this.blur();\n            this.$node.addClass('_nb-is-disabled');\n            this.$control.attr('disabled', 'disabled');\n            this.trigger('nb-disabled', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-focused'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Focus the checkbox or radio</p><pre><code>checkbox.focus();\n</code></pre>",
          "summary": "<p>Focus the checkbox or radio</p>",
          "body": "<pre><code>checkbox.focus();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "focus: function() {\n        this.$control.focus();\n        this.trigger('nb-focused', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-blured'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Blur the checkbox or radio</p><pre><code>checkbox.blur();\n</code></pre>",
          "summary": "<p>Blur the checkbox or radio</p>",
          "body": "<pre><code>checkbox.blur();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "blur: function() {\n        this.$control.blur();\n        this.trigger('nb-blured', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String",
              "Number"
            ],
            "name": "label",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-label-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Sets label of the checkbox or radio</p><pre><code>checkbox.setLabel();\n</code></pre>",
          "summary": "<p>Sets label of the checkbox or radio</p>",
          "body": "<pre><code>checkbox.setLabel();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setLabel: function(label) {\n        this.$node.find('._nb-checkbox-label').html(label);\n        this.trigger('nb-label-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String | Number}"
          }
        ],
        "description": {
          "full": "<p>Gets label of the checkbox or radio</p><pre><code>checkbox.getLabel(); // --&gt; ...\n</code></pre>",
          "summary": "<p>Gets label of the checkbox or radio</p>",
          "body": "<pre><code>checkbox.getLabel(); // --&gt; ...\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getLabel: function() {\n        return this.$node.find('._nb-checkbox-label').html();\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String|Object} name"
          }
        ],
        "description": {
          "full": "<p>Get name of the checkbox or radio</p><pre><code>checkbox.getName(); // --&gt; ...\n</code></pre>",
          "summary": "<p>Get name of the checkbox or radio</p>",
          "body": "<pre><code>checkbox.getName(); // --&gt; ...\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getName: function() {\n        return this.$control.prop('name');\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String",
              "Number"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-name-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set checkbox&#39;s name</p><pre><code>checkbox.setName(&#39;sex&#39;);\n</code></pre>",
          "summary": "<p>Set checkbox&#39;s name</p>",
          "body": "<pre><code>checkbox.setName(&#39;sex&#39;);\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setName: function(value) {\n        this.$control.attr('name', value);\n        this.trigger('nb-name-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String}"
          }
        ],
        "description": {
          "full": "<p>Returns checkbox value</p><pre><code>checkbox.getValue();\n</code></pre>",
          "summary": "<p>Returns checkbox value</p>",
          "body": "<pre><code>checkbox.getValue();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getValue: function() {\n        var valueAttr = this.$control.attr('value');\n        if (typeof valueAttr === 'string') {\n            return valueAttr;\n        } else {\n            // checkbox without @value has .value === 'on'\n            // this is standard browser behavour\n            return 'on';\n        }\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String",
              "Number"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-value-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set checkbox value</p><pre><code>checkbox.setValue(&#39;male&#39;);\n</code></pre>",
          "summary": "<p>Set checkbox value</p>",
          "body": "<pre><code>checkbox.setValue(&#39;male&#39;);\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setValue: function(value) {\n        this.$control.attr('value', value);\n        this.trigger('nb-value-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-destroyed'"
          }
        ],
        "description": {
          "full": "<p>Destroy checkbox</p><pre><code>checkbox.destroy();\n</code></pre>",
          "summary": "<p>Destroy checkbox</p>",
          "body": "<pre><code>checkbox.destroy();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "destroy: function() {\n        this.$control.off('.nb-checkbox');\n        if (this.getType() === 'radio') {\n            nb.off('checkbox:checked', $.proxy(this._onCheckboxChecked, this));\n        }\n        this.trigger('nb-destroyed', this);\n        this.nbdestroy();\n    }\n\n}, 'base');"
      }
    ],
    "md": "<h3 id=\"default-checkbox\">Default checkbox</h3>\n<blockquote>\n<div example=\"checkbox-default\" />\n\n<div class=\"code code_yate\"><pre><code>    nb-checkbox()</code></pre></div></blockquote>\n<ul>\n<li><code>size</code> — m</li>\n<li><code>type</code> — checkbox</li>\n</ul>\n<h3 id=\"optional-attributes\">Optional attributes</h3>\n<ul>\n<li><code>&#39;size&#39;</code> {string} <code>&#39;s&#39;</code> / <code>&#39;m&#39;</code></li>\n<li><code>&#39;id&#39;</code> {string}...</li>\n<li><code>&#39;name&#39;</code> {string}...</li>\n<li><code>&#39;class&#39;</code> {array} <code>[&#39;my_class1&#39;, &#39;my_class2&#39;]</code> — additional classes</li>\n<li><code>&#39;type&#39;</code> {string} <code>&#39;checkbox&#39;</code> / <code>&#39;radio&#39;</code> / <code>&#39;button&#39;</code></li>\n<li><code>&#39;disabled&#39;</code> {boolean} — disabled button</li>\n<li><code>&#39;value&#39;</code> {string} — value</li>\n<li><code>&#39;tabindex&#39;</code> {string} — tabindex</li>\n<li><code>&#39;checked&#39;</code> {boolean} — checked button</li>\n<li><code>&#39;theme&#39;</code> {string} <code>&#39;normal&#39; / &#39;action&#39; (yellow) / &#39;dark&#39; / &#39;pseudo&#39; / &#39;promo&#39; (big yellow)</code> — theme for button type</li>\n<li><code>&#39;content&#39;</code> {string} — text (or custom html) of the label, can be string or <code>xml</code> <em>xss warning!</em></li>\n<li><code>&#39;attrs&#39;</code> {object} <code>{&#39;attr2&#39;: &#39;value2&#39;}</code> — custom DOM attributes for checkbox input</li>\n</ul>\n<h4 id=\"yate-example\">Yate Example</h4>\n<h4 id=\"checked\">checked</h4>\n<blockquote>\n<div example=\"checkbox-checked\" />\n\n<div class=\"code code_yate\"><pre><code>    nb-checkbox({\n        'checked': true()\n    })</code></pre></div></blockquote>\n<h4 id=\"checkbox-with-label\">checkbox with label</h4>\n<blockquote>\n<div example=\"checkbox-label\" />\n\n<div class=\"code code_yate\"><pre><code>    nb-checkbox({\n        'content': 'Do you want to be an icon for the disfranchised masses?'\n        'name': 'is_rock_star'\n    })</code></pre></div></blockquote>\n<h4 id=\"sizes\">Sizes</h4>\n<blockquote>\n<div example=\"checkbox-sizes\" />\n\n<div class=\"code code_yate\"><pre><code>    nb-checkbox({\n        'size': 'm'\n    })\n    ' '\n    nb-checkbox({\n        'size': 's'\n    })</code></pre></div></blockquote>\n<h4 id=\"types\">Types</h4>\n<p>Button type of checkbox</p>\n<blockquote>\n<div example=\"checkbox-button\" />\n\n<div class=\"code code_yate\"><pre><code>   nb-checkbox({\n       'type': 'button'\n       'content': 'Greet the world?'\n   })</code></pre></div></blockquote>\n<h4 id=\"disabled\">Disabled</h4>\n<blockquote>\n<div example=\"checkbox-disable-label\" />\n\n<div class=\"code code_yate\"><pre><code>    nb-checkbox({\n        'content': 'Bet you can`t check me!'\n        'disabled': true()\n    })</code></pre></div><div example=\"checkbox-disable-button\" />\n\n<div class=\"code code_yate\"><pre><code>    nb-checkbox({\n        'type': 'button'\n        'content': 'I`m sorry, but you can`t do it anymore'\n        'disabled': true()\n    })</code></pre></div></blockquote>\n"
  },
  {
    "block": "dropzone",
    "md": "<h3 id=\"default-dropzone\">Default dropzone</h3>\n<blockquote>\n<div example=\"dropzone-default\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-dropzone({\n     'head': 'Upload files'\n     'text': 'To upload, drag files here or '\n     'button' : {\n         'content': 'select files'\n     }\n })</code></pre></div></blockquote>\n<ul>\n<li><code>button</code><ul>\n<li><code>size</code> - <code>s</code></li>\n<li><code>type</code> - <code>file</code></li>\n<li><code>theme</code> - <code>pseudo</code></li>\n<li><code>class</code> - <code>nb-dropzone-button</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"options\">Options</h3>\n<ul>\n<li><code>id</code> {string}</li>\n<li><code>class</code> {string} — additional classes[&#39;my_class1&#39;, &#39;my_class2&#39;] </li>\n<li><code>type</code> {string} — <code>modal</code> (use with <em>paranja</em>)</li>\n<li><code>head</code> {string} — drop zone title</li>\n<li><code>text</code> {string} — text to the left of the &quot;Select file&quot; button</li>\n<li><code>button</code> {nodeset|boolean} — <code>false()</code> to render dropzone without &#39;select file&#39; button; check out <em>button</em> documentation for list of options</li>\n</ul>\n"
  },
  {
    "block": "gap",
    "md": "<h1 id=\"gaps\">Gaps</h1>\n<p>If you need to have gaps between any blocks, you can use global <code>nb-with-SIDE-SIZE-gap</code> classes.</p>\n<h3 id=\"sides\">Sides</h3>\n<p>Sides are <code>top</code>, <code>right</code>, <code>bottom</code> and <code>left</code>, each such class would add the margin of the given <code>SIZE</code> at the corresponding side:</p>\n<div class=\"code code_undefined\"><pre><code>'class': ['nb-with-SIZE-top-gap']\n\n'class': ['nb-with-SIZE-right-gap']\n\n'class': ['nb-with-SIZE-bottom-gap']\n\n'class': ['nb-with-SIZE-left-gap']</code></pre></div><h3 id=\"sizes\">Sizes</h3>\n<p>There are a few of possible preset sizes for gaps: <code>xs</code>, <code>s</code>, <code>m</code> and <code>l</code>. Each side have a modifier for each size, creating classes like <code>nb-gap_top_xs</code> etc.<br>    &#39;class&#39;: [&#39;nb-with-xs-SIDE-gap&#39;]</p>\n<div example=\"gap-xs\"/>\n\n<div class=\"code code_undefined\"><pre><code>'class': ['nb-with-s-SIDE-gap']</code></pre></div><div example=\"gap-s\"/>\n\n<div class=\"code code_undefined\"><pre><code>'class': ['nb-with-m-SIDE-gap']</code></pre></div><div example=\"gap-m\"/>\n\n<div class=\"code code_undefined\"><pre><code>'class': ['nb-with-l-SIDE-gap']</code></pre></div><div example=\"gap-l\"/>\n\n\n\n"
  },
  {
    "block": "group",
    "md": "<p>If you need to have groups consisting of any number of buttons and/or inputs in any order, you can mix them with <code>nb-group-…</code> global classes to achieve the desired behaviour.</p>\n<h3 id=\"group-wrapper\">Group wrapper</h3>\n<ul>\n<li><code>class</code> - <code>[&#39;nb-group&#39;]</code></li>\n</ul>\n<p>To make sure your group&#39;s items won&#39;t wrap you would want to use <code>.nb-group</code> class for their wrapper.</p>\n<h3 id=\"group-items\">Group items</h3>\n<ul>\n<li><code>class</code> - <code>[&#39;nb-group-item&#39;]</code></li>\n</ul>\n<blockquote>\n<div example=\"group1\"/>\n\n<div class=\"code code_yate\"><pre><code>   nb-button({\n        'content': 'Слева'\n        'size': 'm'\n        'class': ['nb-group-item']\n    })\n    nb-input({\n        'class': ['nb-group-item']\n        'size': 'm'\n    })\n    nb-button({\n        'content': 'Справа'\n        'size': 'm'\n        'class': ['nb-group-item']\n    })</code></pre></div></blockquote>\n<p>This is a class for generic group items, when you don&#39;t know their position. Such classes would work only if all the items have the same wrapper and have no other blocks in it.</p>\n<h3 id=\"specific-group-items\">Specific group items</h3>\n<ul>\n<li><code>class</code> - <code>[&#39;nb-group-start&#39;]</code></li>\n<li><code>class</code> - <code>[&#39;nb-group-middle&#39;]</code></li>\n<li><code>class</code> - <code>[&#39;nb-group-end&#39;]</code></li>\n</ul>\n<blockquote>\n<div example=\"group2\"/>\n\n<div class=\"code code_yate\"><pre><code>   nb-button({\n       'content': 'Слева'\n       'theme': 'pseudo'\n       'size': 's'\n       'class': ['nb-group-start']\n   })\n   nb-button({\n       'content': 'В центре'\n       'theme': 'pseudo'\n       'size': 's'\n       'class': ['nb-group-middle']\n   })\n   nb-button({\n       'content': 'Справа'\n       'theme': 'pseudo'\n       'size': 's'\n       'class': ['nb-group-end']\n   })</code></pre></div></blockquote>\n<p>When you have other blocks before or after the grouped items, or you can&#39;t have a common wrapper for them, or they&#39;re placed not in straight order in the HTML, you could use more specific classes, telling where in the group your block is.</p>\n<h3 id=\"complex-group-items\">Complex group items</h3>\n<p>In some cases you would have the button/input which visuals you&#39;d like to adjust to be nested inside other blocks and at the same time you couldn&#39;t tell which item is first and which is last.</p>\n<p>In that case you could use complex group items:</p>\n<ul>\n<li><code>class</code> - <code>[&#39;nb-complex-group-item&#39;]</code></li>\n<li><code>class</code> - <code>[&#39;nb-complex-group-item-subject&#39;]</code></li>\n</ul>\n<p>The <code>.nb-complex-group-item</code> class should be placed at the top level items, while the <code>nb-complex-group-item-subject</code> one should be placed at the actual inputs/items inside.</p>\n"
  },
  {
    "block": "header",
    "jsdoc": [
      {
        "tags": [],
        "description": {
          "full": "<p>Toggles pressed state of button</p>",
          "summary": "<p>Toggles pressed state of button</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "togglePress: function(e) {\n        var $target = $(e.target);\n        $target.closest('.nb-header-button').toggleClass('nb-header-pressed-button');\n\n        if ($target.hasClass('nb-services-icon')) {\n            nb.trigger('services-click');\n        }\n\n        if ($target.hasClass('nb-settings-icon')) {\n            nb.trigger('settings-click');\n        }\n    }\n}, 'base');"
      }
    ],
    "md": "<h3 id=\"default-header\">Default Header</h3>\n<blockquote>\n<div example=\"header-default\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-header({\n       'user': {\n              'username': 'Username'\n              'notices': '7'\n          }\n      })\n  )</code></pre></div></blockquote>\n"
  },
  {
    "block": "icon",
    "md": "<p>You have to explicitly pass icon name to nb-icon()</p>\n<ul>\n<li><code>size</code> — <code>m</code></li>\n</ul>\n<h3 id=\"options\">Options</h3>\n<ul>\n<li><code>id</code> {string}</li>\n<li><code>class</code> {array} — additional classes [&#39;my_class1&#39;, &#39;my_class2&#39;]</li>\n<li><code>icon</code> {string} — icon name (_TODO: List available icon names with descriptions)</li>\n<li><code>size</code> {string} — icon size, <code>s</code> or <code>m</code></li>\n</ul>\n<h3 id=\"examples\">Examples</h3>\n<p>Small icon:</p>\n<blockquote>\n<div example=\"icons-s\"/>\n\n<div class=\"code code_yate\"><pre><code>   nb-icon({\n       'icon': 'link'\n       'size': 's'\n   })>\n   nb-icon({\n       'icon': 'link-white'\n       'size': 's'\n   })</code></pre></div></blockquote>\n<p>Medium-sized icon:</p>\n<blockquote>\n<div example=\"icons-m\"/>\n\n<div class=\"code code_yate\"><pre><code>   nb-icon({\n       'icon': 'link-white'\n       'size': 'm'\n   })\n   nb-icon({\n       'icon': 'link'\n   })</code></pre></div></blockquote>\n"
  },
  {
    "block": "input",
    "jsdoc": [
      {
        "tags": [
          {
            "type": "augments",
            "otherClass": "nb.block.Base"
          }
        ],
        "description": {
          "full": "<p>@class nb.block.Input</p>",
          "summary": "<p>@class nb.block.Input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "nb.define('input', {\n        events: {\n            'click': 'focus',\n            'mousedown ._nb-input-reset': 'reset'\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-inited'"
          },
          {
            "type": "constructor",
            "string": ""
          }
        ],
        "description": {
          "full": "<p>Init input</p>",
          "summary": "<p>Init input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "oninit: function() {\n            var that = this;\n\n            this.data = this.nbdata();\n\n            if (this.data.type == 'simple') {\n                this.$control = this.$node;\n            } else {\n                this.$control = this.$node.find('._nb-input-controller');\n            }\n\n            this.focused = false;\n            this.disabled = this.$control.prop('disabled');\n            this.value = this.getValue();\n\n            this.$reset = this.$node.find('._nb-input-reset');\n            this.$hint = this.$node.find('._nb-input-hint');\n\n            this.$control.on('focusin', function(e) {\n                if (!that.focused) {\n                    that._onfocus(e);\n                }\n            });\n\n            this.$control.on('focusout', function(e) {\n                if (that.focused) {\n                    that._onblur(e);\n                }\n            });\n\n            this.$control.on('change', function(e) {\n                that.trigger('nb-changed', this, e);\n            });\n\n            bindOninput(this, function(e) {\n                that.value = that.getValue();\n\n                if (that.value !== '' && that.$reset.length) {\n                    that.$reset.css('visibility', 'visible');\n                } else {\n                    that.$reset.css('visibility', 'hidden');\n                }\n\n                that.trigger('nb-input', this, e);\n            });\n\n            if (this.$hint.length) {\n                this._inithint();\n            }\n\n            if (this.data.ghost) {\n                this.$node.on('mouseover mouseout', function() {\n                    that.$node.toggleClass('_nb-is-ghost');\n                });\n            }\n\n            if (this.data.error) {\n                this.error = nb.find(this.data.error.id);\n            }\n\n            if (this.value === '' && this.$reset.length) {\n                this.$reset.css('visibility', 'hidden');\n            }\n\n            this._onmousedown = function(e) {\n                if ($.contains(this.$node.get(0), e.target)) {\n                    return;\n                }\n\n                this._onblur(e);\n            }.bind(this);\n\n            // IE 9/10 Enter Key causing Form Submit / Button Click"
      },
      {
        "tags": [],
        "description": {
          "full": "<p>this.$control.keypress(function(e) {<br />             if (e.which == 13) {<br />             e.preventDefault();<br />             }<br />             });</p>",
          "summary": "<p>this.$control.keypress(function(e) {<br />             if (e.which == 13) {<br />             e.preventDefault();<br />             }<br />             });</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "$(document).on('mousedown', this._onmousedown);\n            $(document).on('touchstart', this._onmousedown);\n\n            this.trigger('nb-inited', this);\n        },\n\n        _inithint: function() {\n            var that = this;\n\n            this.$hintGhost = this.$hint.find('._nb-input-hint-ghost');\n\n            if (this.$hintGhost.length) {\n\n                this.$hintGhost.html(that.getValue());\n\n                bindOninput(this, function() {\n                    that.$hintGhost.html(that.getValue());\n                });\n\n            } else {\n                bindOninput(this, function() {\n                    if (that.getValue() === '') {\n                        that.$hint.css('visibility', 'inherit');\n                    } else {\n                        that.$hint.css('visibility', 'hidden');\n                    }\n                });\n            }\n        },\n\n        _onfocus: function(e) {\n            this.$node.addClass('_nb-is-focused');\n            this.focused = true;\n            // if e this method called after tabulation. TODO checking of focus property\n            if (!e) {\n                this.$control.focus();\n            }\n            if (this.$hintGhost && this.$hintGhost.length) {\n                this.$hint.css('visibility', 'hidden');\n            }\n\n            if (this.data.ghost) {\n                this.$node.removeClass('_nb-is-ghost');\n            }\n        },\n\n        _onblur: function(e) {\n            this.$node.removeClass('_nb-is-focused');\n            this.focused = false;\n            // if e this method called after tabulation. TODO checking of focus property\n            if (!e) {\n                this.$control.blur();\n            }\n            if (this.$hintGhost && this.$hintGhost.length) {\n                this.$hint.css('visibility', 'inherit');\n            }\n\n            if (this.data.ghost) {\n                this.$node.addClass('_nb-is-ghost');\n            }\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Object",
              "String"
            ],
            "name": "params",
            "description": "optional params of error popup or contentof Error"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Show inputs error</p>",
          "summary": "<p>Show inputs error</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "showError: function(params) {\n            var wasFocused = this.focused;\n            var params = params || {};\n\n            if (this.data.error) {\n                this.$node.addClass('_nb-is-wrong');\n                var how = {\n                    collision: 'flip flip'\n\n                };\n\n                if (this.data.error.direction && this.data.error.direction == 'left') {\n                    how.at = \"left\";\n                    how.my = \"right\";\n\n                } else {\n                    how.at = \"right\";\n                    how.my = \"left\";\n                }\n\n                if (typeof params === 'string') {\n                    this.setErrorContent(params);\n                }\n\n                if (params.content) {\n                    this.setErrorContent(params.content);\n                }\n\n                if (!this.error.isOpen()) {\n\n                    this.error.open({\n                        autoclose: params.autoclose || false,\n                        autofocus: false,\n                        where: params.where || this.node,\n                        how: params.how || how,\n                        appendTo: params.appendTo || false\n                    });\n\n                    if (wasFocused) {\n                        this._onfocus();\n                    }\n                }\n            }\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Hide inputs error</p>",
          "summary": "<p>Hide inputs error</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "hideError: function() {\n            if (this.data.error) {\n                this.$node.removeClass('_nb-is-wrong');\n                this.error.close();\n            }\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "string"
            ],
            "name": "content",
            "description": "- content for error"
          },
          {
            "type": "fires",
            "string": "'nb-error-content-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set content of inputs error</p>",
          "summary": "<p>Set content of inputs error</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setErrorContent: function(content) {\n            if (this.data.error) {\n                this.error.$node.find('._nb-popup-content').html(content);\n                this.trigger('nb-error-content-set', this);\n            }\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-focused'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Focus the input</p>",
          "summary": "<p>Focus the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "focus: function() {\n            if (!this.focused && this.isEnabled()) {\n                nb.trigger('nb-focusout');\n                this._onfocus();\n                this.trigger('nb-focused', this);\n            }\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-blured'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Blur the input</p>",
          "summary": "<p>Blur the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "blur: function() {\n            if (this.focused && this.isEnabled()) {\n                this._onblur();\n                this.trigger('nb-blured', this);\n            }\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-disabled'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Disables the input</p>",
          "summary": "<p>Disables the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "disable: function() {\n            this.$node.addClass('_nb-is-disabled');\n            this.$control.prop('disabled', true);\n            this.trigger('nb-disabled', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-enabled'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Enables the input</p>",
          "summary": "<p>Enables the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "enable: function() {\n            this.$node.removeClass('_nb-is-disabled');\n            this.$control.prop('disabled', false);\n            this.trigger('nb-enabled', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String",
              "Object"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-value-set', 'nb-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set value of the input</p>",
          "summary": "<p>Set value of the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setValue: function(value) {"
      },
      {
        "tags": [],
        "description": {
          "full": "<p>Check newValue and actualValue to avoid recursion</p><pre><code>         nbInput.on(&#39;nb-changed&#39;, function() {\n         var validValue = validate(this.getValue());\n         this.setValue(validValue);\n         });\n</code></pre>",
          "summary": "<p>Check newValue and actualValue to avoid recursion</p>",
          "body": "<pre><code>         nbInput.on(&#39;nb-changed&#39;, function() {\n         var validValue = validate(this.getValue());\n         this.setValue(validValue);\n         });\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "if (this.value != value) {\n                this.value = value;\n                this.$control.val(value);\n                this.$control.trigger('input');\n                this.trigger('nb-value-set', this);\n                this.trigger('nb-changed', this);\n            }\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String|Object} value"
          }
        ],
        "description": {
          "full": "<p>Get value of the input</p>",
          "summary": "<p>Get value of the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getValue: function() {\n            // get actual value from <input/> and save it to instance\n            return this.$control.val();\n        },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String|Object} name"
          }
        ],
        "description": {
          "full": "<p>Get name of the input</p>",
          "summary": "<p>Get name of the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getName: function() {\n            return this.$control.prop('name');\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String",
              "Object"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-name-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set name of the input</p>",
          "summary": "<p>Set name of the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setName: function(value) {\n            this.$control.attr('name', value);\n            this.trigger('nb-name-set', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Boolean}"
          }
        ],
        "description": {
          "full": "<p>Return state of the input</p>",
          "summary": "<p>Return state of the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isEnabled: function() {\n            return !this.$control.prop('disabled');\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-value-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Resets value of the input</p>",
          "summary": "<p>Resets value of the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "reset: function(evt) {\n            if (evt && evt.preventDefault) {\n                evt.preventDefault();\n            }\n\n            this.setValue('');\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-hint-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set hint of the input</p>",
          "summary": "<p>Set hint of the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setHint: function(value) {\n            if (this.$hint.length) {\n                if (this.$hintGhost.length) {\n                    this.$hint.find('._nb-input-hint-content').html(value);\n                } else {\n                    this.$hint.find('._nb-input-hint-inner').html(value);\n                }\n                this.trigger('nb-hint-set', this);\n            }\n\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String} hint"
          }
        ],
        "description": {
          "full": "<p>Get hint of the input</p>",
          "summary": "<p>Get hint of the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getHint: function() {\n            var value = '';\n            if (this.$hint.length) {\n\n                if (this.$hintGhost.length) {\n                    value = this.$hint.find('._nb-input-hint-content').html();\n                } else {\n                    value = this.$hint.find('._nb-input-hint-inner').html();\n                }\n\n            }\n            return value;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-destroyed'"
          }
        ],
        "description": {
          "full": "<p>Destroy the button</p>",
          "summary": "<p>Destroy the button</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "destroy: function() {\n            this.trigger('nb-destroyed', this);\n            if (this.error) {\n                this.error.nbdestroy();\n                this.error.$node.remove();\n            }\n            $(document).off('mousedown', this._onmousedown);\n            $(document).off('touchstart', this._onmousedown);\n            $(document).off('keydown', this._onkeydown);\n            this.nbdestroy();\n        }\n    }, 'base');\n\n\n})();"
      }
    ],
    "md": "<h3 id=\"default-input\">Default input</h3>\n<blockquote>\n<div example=\"input-simple\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-input({\n  'content': 'hello, world!',\n  'name': 'greetings'\n})</code></pre></div></blockquote>\n<ul>\n<li>size: &#39;s&#39;</li>\n</ul>\n<h3 id=\"options\">Options</h3>\n<ul>\n<li><code>&#39;id&#39;</code> {string}</li>\n<li><code>&#39;name&#39;</code> {string}</li>\n<li><code>&#39;attrs&#39;</code> {object} - attrubutes for input node</li>\n<li><code>&#39;content&#39;</code> {string|xml} - <code>value</code> of the input</li>\n<li><code>&#39;type&#39;</code> {string} — <code>&#39;multiline&#39;</code> textarea</li>\n<li><code>&#39;ghost&#39;</code> {boolean} — ghost mode input</li>\n<li><code>&#39;disabled&#39;</code> {boolean}</li>\n<li><code>&#39;reset&#39;</code> {boolean} — reset control in input</li>\n<li><code>&#39;tabindex&#39;</code> {string} — tabindex</li>\n<li><code>&#39;size&#39;</code> {string}  - input size. <code>&#39;s&#39;</code> (no other sizes supported)</li>\n<li><code>&#39;error&#39;</code> {object} <code>{content: &#39;error content&#39;, direction: &#39;right|left&#39;}</code></li>\n<li><code>&#39;leftContent&#39;</code> {string|xml} — content of the left field of input</li>\n<li><code>&#39;rightContent&#39;</code> {string|xml} — content of the right field of input</li>\n<li><code>&#39;hint&#39;</code> {string | Object} — content of hint or <code>{ text: &#39;...&#39;, ghost: true() }</code> for ghost hint</li>\n</ul>\n<h3 id=\"yate-examples\">Yate examples</h3>\n<h3 id=\"types\">Types</h3>\n<blockquote>\n<div example=\"input-simple-left-content\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-input({\n    'leftContent': 'hello, world!'\n    'name': 'greetings'\n})</code></pre></div><div example=\"input-simple-right-content\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-input({\n    'rightContent': 'hello, world!'\n    'name': 'greetings'\n})</code></pre></div><div example=\"input-simple-reset\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-input({\n    'reset': true()\n    'content': 'hello, world!'\n    'name': 'greetings'\n})</code></pre></div><div example=\"input-simple-hint\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-input({\n    'name': 'greetings'\n    'hint': 'Can you greet the world?'\n})</code></pre></div><div example=\"input-simple-hint-ghost\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-input({\n    'name': 'greetings'\n    'hint': {\n         'text': 'Can you greet the world?'\n         'ghost': true()\n    }\n})</code></pre></div><div example=\"input-simple-error\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-input({\n    'name': 'greetings'\n    'error': {\n         'content': 'Ooops... It`s a wrong way'\n    }\n})</code></pre></div><div example=\"input-multiline\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-input({\n    'content': 'hello, world!'\n    'name': 'greetings'\n    'type': 'multiline'\n})</code></pre></div><div example=\"input-multiline-rightContent\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-input({\n    'rightContent': 'hello, world!'\n    'name': 'greetings'\n    'type': 'multiline'\n})</code></pre></div></blockquote>\n<h3 id=\"sizes\">Sizes</h3>\n<blockquote>\n<div example=\"input-size-s\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-input({\n    'size': 's'\n    'content': 'hello, world!'\n    'name': 'greetings'\n})</code></pre></div><div example=\"input-size-m\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-input({\n    'size': 'm'\n    'content': 'hello, world!'\n    'name': 'greetings'\n})</code></pre></div></blockquote>\n<h3 id=\"disabled\">Disabled</h3>\n<blockquote>\n<div example=\"input-simple-disabled\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-input({\n    'content': 'hello, world!'\n    'name': 'greetings'\n    'disabled': true()\n})</code></pre></div><div example=\"input-multiline-disabled\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-input({\n    'content': 'hello, world!'\n    'name': 'greetings'\n    'type': 'multiline'\n    'disabled': true()\n})</code></pre></div></blockquote>\n<h3 id=\"events\">Events</h3>\n<h4 id=\"nb-input\">nb-input</h4>\n<p>On native control input</p>\n<p>Arguments:</p>\n<ul>\n<li>event name</li>\n<li>block</li>\n<li>original event</li>\n</ul>\n<h4 id=\"nb-changed\">nb-changed</h4>\n<p>On native control change</p>\n<p>Arguments:</p>\n<ul>\n<li>event name</li>\n<li>block</li>\n<li>original event</li>\n</ul>\n"
  },
  {
    "block": "input-group",
    "jsdoc": [
      {
        "tags": [],
        "description": {
          "full": "<p>Disables the input-group</p>",
          "summary": "<p>Disables the input-group</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "onDisable: function() {\n        this.input.trigger('disable');\n        this.button.disable();\n        this.disabled = true;\n    },"
      },
      {
        "tags": [],
        "description": {
          "full": "<p>Enables the input-group</p>",
          "summary": "<p>Enables the input-group</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "onEnable: function() {\n        this.input.trigger('enable');\n        this.button.enable();\n        this.disabled = false;\n    }\n}, 'base');"
      }
    ],
    "md": "<div class=\"code code_undefined\"><pre><code>    nb-input-group()</code></pre></div><p>Renders compound group of text input field and button, ordered accordingly to <code>options</code>.</p>\n<h3 id=\"options\">Options</h3>\n<ul>\n<li><code>id</code> {string}</li>\n<li><code>class</code> {array} — additional classes</li>\n<li><code>disabled</code> {boolean} — disable both inputs</li>\n<li><code>input</code> {string} — options for text input field</li>\n<li><code>button</code> {string} — options for button</li>\n</ul>\n<p>NB: For description of <code>button</code> and <code>input</code> see corresponding docs</p>\n<h3 id=\"examples\">Examples</h3>\n<p>A button with an icon, then a text input field:</p>\n<blockquote>\n<div example=\"input-group1\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-input-group({\n   'button' : {\n       'size': 's'\n       'icon': 'link'\n   }\n   'input' : {\n       'size': 's'\n       'content': 'http://yadi.sk/'\n   }\n})</code></pre></div></blockquote>\n<p>A group of an input field and a button with text, disabled altogether as a whole:</p>\n<blockquote>\n<div example=\"input-group\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-input-group({\n   'input' : {\n       'size': 's'\n       'attrs': {\n           'placeholder': 'Ticket number'\n       }\n   }\n   'button' : {\n       'size': 's'\n       'content': 'check'\n       'disabled': true()\n   }\n})</code></pre></div></blockquote>\n"
  },
  {
    "block": "island",
    "md": "<h3 id=\"options\">Options</h3>\n<ul>\n<li><code>padding</code> {string} — s / m / l</li>\n<li><code>type</code> {string} — inline / fly</li>\n<li><code>content</code> {xml|string} — island&#39;s content, can be string or <code>xml</code> <em>xss warning!</em></li>\n</ul>\n<h3 id=\"examples\">Examples</h3>\n<p>Basic island:</p>\n<blockquote>\n<div example=\"island-simple\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-island({\n  'content': 'Island'\n  'attrs': {\n      'style': 'height: 100px; width: 200px'\n   }\n})</code></pre></div></blockquote>\n<p>Flying island with an M-sized padding:</p>\n<blockquote>\n<div example=\"island-fly\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-island({\n    'content': 'Fly island'\n    'type': 'fly'\n    'padding': 'm'\n    'attrs': {\n       'style': 'height: 100px; width: 200px'\n    }\n})</code></pre></div></blockquote>\n<p>Inline island with an L-sized padding:</p>\n<blockquote>\n<div example=\"island-padding\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-island({\n  'content': 'Inline island with padding '\n  'padding': 'l'\n  'type':  'inline'\n})</code></pre></div></blockquote>\n"
  },
  {
    "block": "loader",
    "md": "<h3 id=\"default-loader\">Default loader</h3>\n<blockquote>\n<div example=\"loader-m\"/>\n\n<div class=\"code code_yate\"><pre><code>    nb-loader()</code></pre></div></blockquote>\n<ul>\n<li><code>size</code>: <code>m</code></li>\n</ul>\n<h3 id=\"options\">Options</h3>\n<ul>\n<li><code>color</code> {string} — spinner color, black by default, <code>while</code> is the only alternate option</li>\n<li><code>size</code> {string} — spinner size — s / m / l</li>\n</ul>\n<h3 id=\"examples\">Examples</h3>\n<p>Small loader:</p>\n<blockquote>\n<div example=\"loader-s\"/>\n\n<div class=\"code code_yate\"><pre><code>    nb-loader({\n        'size': 's'\n    })</code></pre></div></blockquote>\n<p>White medium loader on white background:</p>\n<blockquote>\n<div example=\"loader-w\"/>\n\n<div class=\"code code_yate\"><pre><code>    nb-loader({\n        'color': 'white'\n    })</code></pre></div></blockquote>\n"
  },
  {
    "block": "paranja",
    "md": "<div class=\"code code_undefined\"><pre><code>    nb-paranja()</code></pre></div><ul>\n<li><code>theme</code> — dark</li>\n</ul>\n<h3 id=\"options\">Options</h3>\n<ul>\n<li><code>id</code> {string}</li>\n<li><code>class</code> {array} — additional classes</li>\n<li><code>attrs</code> {object} — custom DOM attributes, e.g.: <code>{ &#39;attr2: &#39;value2&#39; }</code></li>\n<li><code>theme</code> {string} — light / dark</li>\n<li><code>content</code> {xml, string} — can be string or <code>xml</code> <em>xss warning!</em></li>\n</ul>\n<h3 id=\"examples\">Examples</h3>\n<div class=\"code code_undefined\"><pre><code>    nb-paranja({\n        'theme': 'light'\n        'content': '<div>Surprise!</div>'\n    })</code></pre></div>"
  },
  {
    "block": "popup",
    "jsdoc": [
      {
        "tags": [],
        "description": {
          "full": "<h3>jQuery UI Depends</h3>\n<ul>\n<li>jquery.ui.dialog.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.widget.js</li>\n<li>jquery.ui.button.js</li>\n<li>jquery.ui.draggable.js</li>\n<li>jquery.ui.mouse.js</li>\n<li>jquery.ui.position.js</li>\n</ul>\n",
          "summary": "<h3>jQuery UI Depends</h3>\n",
          "body": "<ul>\n<li>jquery.ui.dialog.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.widget.js</li>\n<li>jquery.ui.button.js</li>\n<li>jquery.ui.draggable.js</li>\n<li>jquery.ui.mouse.js</li>\n<li>jquery.ui.position.js</li>\n</ul>\n"
        },
        "isPrivate": false,
        "ignore": true,
        "code": "(function() {\n\n    // Надстройки nb над jQueryUI\n    $.nb = {};\n\n    // 60 fps is optimal rate for smooth changes\n    var TIME_PER_FRAME = 1000 / 60;\n\n    $.widget('nb.baseDialog', $.ui.dialog, {\n        options: {\n            height: 'auto',\n            minHeight: 'auto',\n            width: 'auto'\n        },\n        open: function() {\n            this._super();\n            var that = this;\n\n            if (that.options.autoclose) {\n                if (this.options.modal) {\n                    this._onmousedown = function(e) {\n                        that.options.closedByOuterClick = true;\n                        if (e.which === 2 || e.which === 3) {\n                            return;\n                        }\n                        that.close();\n                    };\n                    this.overlay.click(this._onmousedown);\n                } else {\n                    this._onmousedown = function(e) {\n                        that.options.closedByOuterClick = true;\n                        if (e.which === 2 || e.which === 3) {\n                            return;\n                        }\n\n                        if ($.contains(that.uiDialog[0], e.target)) {\n                            return;\n                        }\n\n                        that.close();\n                    };\n\n                    this.document.on('mousedown', this._onmousedown);\n                    this.document.on('touchstart', this._onmousedown);\n                }\n            }\n\n            this._onresize = $.throttle(TIME_PER_FRAME, this._position.bind(this));\n            this.window.on('resize', this._onresize);\n\n\n            this._onpopupclose = nb.on('popup-close', function() {\n                if (that.options.autoclose) {\n                    that.close();\n                }\n            });\n        },\n        close: function() {\n            this._super();\n            if (this.options.autoclose) {\n                this.document.off('mousedown', this._onmousedown);\n                this.document.off('touchstart', this._onmousedown);\n                this.document.off('click', this._onmousedown);\n            }\n\n            if (this._onresize) {\n                this.window.off('resize', this._onresize);\n            }\n\n            nb.off('popup-close', this._onpopupclose);\n        },\n        _focusTabbable: function() {\n            if (this.options.autofocus) {\n                this._super();\n            }\n        },\n        _keepFocus: $.noop,\n        _create: function() {\n            this.options.dialogClass += _getUIDialogExtraClass.call(this);\n            this.options.dialogClass += (this.options.position.fixed) ? ' ui-dialog-fixed' : '';\n            this._super();\n            this.element[0].widget = this;\n        },\n        _destroy: function() {\n            this._super();\n            delete this.element[0].widget;\n        },\n\n        _position: function() {\n            var that = this;\n            var using = this.options.position.using;\n\n            // Перестановка базового опорного свойства.\n            this.options.position.using = function(props, ui) {\n                var position = $.extend({}, props);\n                var width;\n                var height;\n\n                $(ui.element.element[0]).css({top: 'auto', bottom: 'auto', left: 'auto', right: 'auto'});\n\n                if (ui.vertical == 'bottom') {\n                    height = that.window.height();\n                    position.bottom = height - (position.top + ui.element.height);\n                    position.top = 'auto';\n                }\n\n                if (ui.horizontal == 'right') {\n                    width = that.window.width();\n                    position.right = width - (position.left + ui.element.width);\n                    position.left = 'auto';\n                }\n\n                return using.call(ui.element.element[0], position, ui);\n            };\n\n            this._super();\n\n            this.options.position.using = using;\n        },\n        _createTitlebar: function() {\n            this.uiDialogTitlebarClose = $();\n        }\n    });\n\n    // диалог с хвостиком\n    $.widget('nb.contextDialog', $.nb.baseDialog, {\n\n        tailOffset: 13,\n\n        options: {\n            height: 'auto',\n            minHeight: 'auto',\n            width: 'auto',\n            show: {\n                effect: 'nb',\n                duration: 150\n            },\n            hide: {\n                effect: 'nb',\n                duration: 150\n            },\n            draggable: false,\n            resizable: false,\n            dialogClass: '_nb-popup-outer ui-dialog-no-close',\n            position: {\n                my: 'center top',\n                at: 'center bottom',\n                // horizontal: fit, пытаемся уместить в window\n                // vertical: flip - выбирает наилучший вариант - вверх или вних\n                collision: \"fit flip\"\n            }\n        },\n\n\n        _create: function() {\n            this._super();\n            if (!this.options.withoutTail) {\n                this.$tail = $('<div class=\"_nb-popup-tail\"><i/></div>');\n                //TODO: проверить, что вызывается один раз\n                this.$tail.prependTo(this.uiDialog);\n            }\n\n        },\n        _position: function() {\n            var that = this;\n            var using = this.options.position.using;\n\n            // Позиционирование хвостика попапа, заданное в CSS.\n            var defaultTailPosition = {\n                top: '',\n                left: '',\n                right: '',\n                bottom: ''\n            };\n\n            this.options.position.using = function(props, ui) {\n                var $el = ui.element.element;\n                var el = $el[0];\n                var tailPosition;\n                var tailLimits;\n\n                // Определение направления хвостика.\n                var tailDirection = _getPopupTailDirection(ui.target, ui.element);\n                var targetCenter = _getElementCenter(ui.target);\n\n                nb.node.setMod(el, '_nb-popup_to', _getInverseDirection(tailDirection));\n                $el.data('nb-tail-dir', tailDirection);\n\n                if (!that.options.withoutTail) {\n                    // Позиционирование хвостика вдоль попапа, необходимо для того,\n                    // чтобы хвостик указывал на центр целевого элемента.\n                    if (_isDirectionVertical(tailDirection)) {\n                        tailLimits = [that.tailOffset, ui.element.width - that.tailOffset];\n                        tailPosition = _limitNumber(Math.abs(targetCenter.x - ui.element.left), tailLimits);\n\n                        that.$tail.css($.extend(defaultTailPosition, {\n                            left: tailPosition + 'px'\n                        }));\n\n                    } else {\n                        tailLimits = [that.tailOffset, ui.element.height - that.tailOffset];\n                        tailPosition = _limitNumber(Math.abs(targetCenter.y - ui.element.top), tailLimits);\n\n                        that.$tail.css($.extend(defaultTailPosition, {\n                            top: tailPosition + 'px'\n                        }));\n                    }\n\n                    props[tailDirection] += that.tailOffset;\n                }\n\n                return using.call(el, props, ui);\n            };\n\n            this._super();\n\n            this.options.position.using = using;\n        }\n    });\n\n    jQuery.effects.effect.nb = function(o, done) {\n        var $this = $(this);\n        var mode = $.effects.setMode($this, o.mode || 'hide');\n        var shouldHide = mode === 'hide';\n\n        var tailDirection = $this.data('nb-tail-dir');\n        var distance = $.nb.contextDialog.prototype.tailOffset;\n\n        var animation = {};\n        animation.opacity = shouldHide ? 0 : 1;\n        animation[tailDirection] = (shouldHide ? '+=' : '-=') + distance;\n\n        if (!shouldHide) {\n            $this.css(tailDirection, '+=' + distance);\n            $this.show();\n        }\n\n        $this.animate(animation, {\n            queue: false,\n            duration: o.duration,\n            easing: o.easing,\n            complete: function() {\n                if (shouldHide) {\n                    $this.hide();\n                }\n                done();\n            }\n        });\n    };"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "targetDimensions",
            "description": "Положение и измерения элемента, на который указывает попап"
          },
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "popupDimensions",
            "description": "Положение и измерения попапа"
          },
          {
            "type": "return",
            "types": [
              "String"
            ],
            "description": "top|right|bottom|left"
          },
          {
            "type": "private",
            "visibility": "private"
          }
        ],
        "description": {
          "full": "<p>Вычисляет направление хвостика попапа, принимая во внимание положение<br />и размер обоих элементов.</p><p>Сперва для каждого элемента вычисляются координаты вершин опоясывающего<br />прямоугольника. После этого, для каждой внешней полуплоскости,<br />образованной сторонами прямоугольника целевого элемента (т.н. тогглера)<br />проверяется попадание вершин прямоугольника попапа.</p>",
          "summary": "<p>Вычисляет направление хвостика попапа, принимая во внимание положение<br />и размер обоих элементов.</p>",
          "body": "<p>Сперва для каждого элемента вычисляются координаты вершин опоясывающего<br />прямоугольника. После этого, для каждой внешней полуплоскости,<br />образованной сторонами прямоугольника целевого элемента (т.н. тогглера)<br />проверяется попадание вершин прямоугольника попапа.</p>"
        },
        "isPrivate": true,
        "ignore": false,
        "code": "function _getPopupTailDirection(targetDimensions, popupDimensions) {\n        var p = _getBoundingRectangle(popupDimensions);\n        var t = _getBoundingRectangle(targetDimensions);\n\n        // Проверка полуплоскости вверх от целевого элемента.\n        if (p[0].y <= t[0].y && p[1].y <= t[0].y) {\n            return 'bottom';\n        }\n\n        // Проверка полуплоскости вправо от целевого элемента.\n        if (p[0].x >= t[1].x && p[1].x >= t[1].x) {\n            return 'left';\n        }\n\n        // Проверка полуплоскости вниз от целевого элемента.\n        if (p[0].y >= t[1].y && p[1].y >= t[1].y) {\n            return 'top';\n        }\n\n        // В оставшихся случаях попап лежит слева от тогглера.\n        return 'right';\n    }",
        "ctx": {
          "type": "function",
          "name": "_getPopupTailDirection",
          "string": "_getPopupTailDirection()"
        }
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "d",
            "description": ""
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": ""
          },
          {
            "type": "private",
            "visibility": "private"
          }
        ],
        "description": {
          "full": "<p>Рассчитывает координату центра прямоугольника на основе значений<br /><code>left</code>, <code>top</code>, <code>width</code>, <code>height</code>.</p>",
          "summary": "<p>Рассчитывает координату центра прямоугольника на основе значений<br /><code>left</code>, <code>top</code>, <code>width</code>, <code>height</code>.</p>",
          "body": ""
        },
        "isPrivate": true,
        "ignore": false,
        "code": "function _getElementCenter(d) {\n        return {\n            x: Math.round(d.left + (d.width / 2)),\n            y: Math.round(d.top + (d.height / 2))\n        };\n    }",
        "ctx": {
          "type": "function",
          "name": "_getElementCenter",
          "string": "_getElementCenter()"
        }
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Number"
            ],
            "name": "number",
            "description": ""
          },
          {
            "type": "param",
            "types": [
              "Array"
            ],
            "name": "range",
            "description": "[min, max]"
          },
          {
            "type": "return",
            "types": [
              "Number"
            ],
            "description": ""
          },
          {
            "type": "private",
            "visibility": "private"
          }
        ],
        "description": {
          "full": "<p>Ограничивает переданное число в заданный промежуток.</p>",
          "summary": "<p>Ограничивает переданное число в заданный промежуток.</p>",
          "body": ""
        },
        "isPrivate": true,
        "ignore": false,
        "code": "function _limitNumber(number, range) {\n        return Math.min(Math.max(number, range[0]), range[1]);\n    }",
        "ctx": {
          "type": "function",
          "name": "_limitNumber",
          "string": "_limitNumber()"
        }
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "d",
            "description": ""
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": ""
          },
          {
            "type": "private",
            "visibility": "private"
          }
        ],
        "description": {
          "full": "<p>Возвращает координаты левой верхней и правой нижней вершин прямоугольника,<br />из значений <code>top</code>, <code>left</code>, <code>width</code> и <code>height</code>:</p><pre><code>{\n    top: 20,\n    left: 25,\n    width: 50,\n    height: 20\n}\n</code></pre><p>в</p><pre><code>[\n    {\n        x: 25,\n        y: 20\n    },\n    {\n        x: 75,\n        y: 70\n    }\n]\n</code></pre>",
          "summary": "<p>Возвращает координаты левой верхней и правой нижней вершин прямоугольника,<br />из значений <code>top</code>, <code>left</code>, <code>width</code> и <code>height</code>:</p>",
          "body": "<pre><code>{\n    top: 20,\n    left: 25,\n    width: 50,\n    height: 20\n}\n</code></pre><p>в</p><pre><code>[\n    {\n        x: 25,\n        y: 20\n    },\n    {\n        x: 75,\n        y: 70\n    }\n]\n</code></pre>"
        },
        "isPrivate": true,
        "ignore": false,
        "code": "function _getBoundingRectangle(d) {\n        return [\n            {\n                x: Math.round(d.left),\n                y: Math.round(d.top)\n            },\n            {\n                x: Math.round(d.left + d.width),\n                y: Math.round(d.top + d.height)\n            }\n        ];\n    }",
        "ctx": {
          "type": "function",
          "name": "_getBoundingRectangle",
          "string": "_getBoundingRectangle()"
        }
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "direction",
            "description": ""
          },
          {
            "type": "return",
            "types": [
              "String"
            ],
            "description": ""
          }
        ],
        "description": {
          "full": "<p>Возвращает строковое представление противоположного направления,<br />например <code>top</code> -&gt; <code>bottom</code>.</p>",
          "summary": "<p>Возвращает строковое представление противоположного направления,<br />например <code>top</code> -&gt; <code>bottom</code>.</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "function _getInverseDirection(direction) {\n        var inversion = {\n            top: 'bottom',\n            bottom: 'top',\n            left: 'right',\n            right: 'left'\n        };\n\n        return inversion[direction];\n    }\n\n    function _isDirectionVertical(direction) {\n        return direction === 'top' || direction === 'bottom';\n    }",
        "ctx": {
          "type": "function",
          "name": "_getInverseDirection",
          "string": "_getInverseDirection()"
        }
      },
      {
        "tags": [],
        "description": {
          "full": "<p>Функция возвращает строку с модификаторами<br /> для обертки попапа, которую добавляет jquery ui,<br /> в соответсвии с модификаторами самого попапа</p><p> Например, для попапа заданы классы-модификаторы nb-popup_mod и nb-popup_another-mod,<br /> функция вернет строку &#39;nb-popup-outer_mod nb-popup-outer_another-mod&#39;</p>",
          "summary": "<p>Функция возвращает строку с модификаторами<br /> для обертки попапа, которую добавляет jquery ui,<br /> в соответсвии с модификаторами самого попапа</p>",
          "body": "<p> Например, для попапа заданы классы-модификаторы nb-popup_mod и nb-popup_another-mod,<br /> функция вернет строку &#39;nb-popup-outer_mod nb-popup-outer_another-mod&#39;</p>"
        },
        "isPrivate": false,
        "ignore": true,
        "code": "function _getUIDialogExtraClass() {\n        var popupClasses = this.element.attr('class').split(' ') || [];\n        // не матчимся на _ в начале слова\n        // иначе это глобальный класс,\n        // не мачимся на __, чтобы ислючить элемент\n        var modRe = /\\w+\\_(?!_)/;\n        var uiDialogClasses;\n\n        uiDialogClasses = $.map(popupClasses, function(item) {\n            var parts = item.split(modRe);\n            var l = parts.length;\n            var modifier = parts.pop();\n            var newClass = '';\n\n            // в массиве должно быть больше 1 элемента\n            // иначе модификатора не было\n            if (l > 1) {\n                newClass = 'nb-popup-outer_' + modifier;\n            }\n\n            return newClass;\n        });\n\n        return uiDialogClasses.join(' ');\n    }\n\n\n    nb.define('popup', {\n\n        events: {\n            'click ._nb-popup-close': 'close',\n            'position': 'onposition'\n        },\n\n        // ----------------------------------------------------------------------------------------------------------------- //\n        oninit: function() {\n            var that = this;\n            var data = this.nbdata();\n\n            if ('modal' in data) {\n                this.modal = true;\n            }\n\n            this.$menu = this.$node.find('._nb-popup-menu');\n\n            if (this.$menu.length) {\n                this.$menu.menu({\n                    select: function(event, ui) {\n                        that.trigger('nb-select', {\n                            event: event,\n                            ui: ui\n                        });\n                    }\n                });\n            }\n        },\n\n        onposition: function(e, params) {\n            var where = params.where;\n            var how = params.how;\n            this._move(where, how, params);\n        },",
        "ctx": {
          "type": "function",
          "name": "_getUIDialogExtraClass",
          "string": "_getUIDialogExtraClass()"
        }
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "params",
            "description": "settings for popup"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "nb.block"
          }
        ],
        "description": {
          "full": "<p>Open popup</p><pre><code>popup.open({\n    where: [100, 200],\n    how: &#39;top bottom&#39;\n});\n</code></pre>",
          "summary": "<p>Open popup</p>",
          "body": "<pre><code>popup.open({\n    where: [100, 200],\n    how: &#39;top bottom&#39;\n});\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "open: function(p) {\n            var params = p || {};\n            var where = params.where;\n            var how = params.how;\n\n            if (this.where) {\n                //  Попап уже открыт\n                //  FIXME: Буэээ. Уродливое условие для варианта, когда заданы координаты вместо ноды.\n                if (where !== this.where || ( (where instanceof Array) && (where[0] !== this.where[0] || where[1] !== this.where[1] ))) {\n                    //  На другой ноде. Передвигаем его в нужное место.\n                    this._move(where, how);\n                }\n            } else {\n                //  Попап закрыт. Будем открывать.\n                if (params.where || this.modal) {\n                    $(this.node).removeClass('_nb-is-hidden');\n                    //  Передвигаем попап.\n                    this._move(where, how, params);\n                    this.trigger('nb-opened');\n                }\n            }\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "nb.block"
          }
        ],
        "description": {
          "full": "<p>Close popup</p>",
          "summary": "<p>Close popup</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "close: function() {\n\n            //  Снимаем флаг о том, что попап открыт.\n            this.where = null;\n\n            if (this.isOpen()) {\n                this.node.widget.close();\n                this.trigger('nb-closed');\n            }\n\n            // if popup closed by document click we also should fire event\n            if (this.node && this.node.widget && this.node.widget.options.closedByOuterClick) {\n                this.node.widget.options.closedByOuterClick = false;\n                this.trigger('nb-closed');\n            }\n\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-content-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set content of popup (not menu, not modal)</p>",
          "summary": "<p>Set content of popup (not menu, not modal)</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setContent: function(content) {\n            this.$node.find('._nb-popup-content').html(content);\n            this.trigger('nb-content-set');\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String} content"
          }
        ],
        "description": {
          "full": "<p>Get content of popup (not menu, not modal)</p>",
          "summary": "<p>Get content of popup (not menu, not modal)</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getContent: function() {\n            return this.$node.find('._nb-popup-content').html();\n        },\n\n        isOpen: function() {\n            return this.node && this.node.widget && this.node.widget.isOpen();\n        },"
      },
      {
        "tags": [],
        "description": {
          "full": "<p>Destroy the popup</p>",
          "summary": "<p>Destroy the popup</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "destroy: function() {\n            if (this.node && this.node.widget) {\n                this.node.widget.destroy();\n                this.$node.addClass('_nb-is-hidden');\n            }\n\n            this.trigger('nb-destroyed', this);\n            this.nbdestroy();\n        },\n\n        // ----------------------------------------------------------------------------------------------------------------- //\n\n        _move: function(where, how, params) {\n            //  Запоминаем, на какой ноде мы открываем попап.\n            this.where = where;\n            var that = this;\n\n            var data = this.nbdata();\n            // по умолчанию попап позиционирова абсолютно\n            var isFixed = false;\n\n            // сделаем попап фиксированным, если\n            // у popup-toggler задан how.fixed = true\n            if (how && how.fixed) {\n                isFixed = true;\n            }\n            // или если был задан атрибут data-nb-how = 'fixed'\n            // в настройках самого попапа\n            if (data.how == 'fixed') {\n                isFixed = true;\n            }\n\n            var using = function(props) {\n                var $el = $(this);\n\n                if (params.animate) {\n                    $el.stop().animate(props, {\n                        duration: 'fast',\n                        queue: false,\n                        complete: $.proxy(that.trigger, that, 'position.complete')\n                    });\n                } else {\n                    $el.css(props);\n                }\n            };\n\n            how = how || {};\n\n            var autoclose = true;\n\n            if (typeof how.autoclose !== 'undefined') {\n                autoclose = how.autoclose;\n            }\n\n            if (typeof params.autoclose !== 'undefined') {\n                autoclose = params.autoclose;\n            }\n\n            var autofocus = true;\n\n            if (typeof how.autofocus !== 'undefined') {\n                autofocus = how.autofocus;\n            }\n\n            if (typeof params.autofocus !== 'undefined') {\n                autofocus = params.autofocus;\n            }\n\n            //  Модальный попап двигать не нужно.\n            if (this.modal) {\n                $(this.node).baseDialog({\n                    height: data.height,\n                    minHeight: data.minheight,\n                    width: data.width,\n                    show: 'fade',\n                    hide: 'fade',\n                    modal: true,\n                    resizable: false,\n                    draggable: false,\n                    dialogClass: '_nb-popup-outer ui-dialog-fixed',\n                    close: function() {\n                        that.close();\n                    },\n                    appendTo: params.appendTo,\n                    position: {\n                        using: using\n                    },\n                    autoclose: autoclose,\n                    autofocus: autofocus\n                });\n\n                return;\n            }\n\n            this.$node.hide().contextDialog({\n                position: {\n                    // где попап\n                    at: (how.at ? how.at : 'center bottom'),// + ' center',\n                    // где ссылка, которая открыла попап\n                    my: (how.my ? how.my : 'center top'),// + ' center',\n                    fixed: isFixed,\n                    of: $(this.where),\n                    // horizontal: fit, пытаемся уместить в window\n                    // vertical: flip - выбирает наилучший вариант - вверх или вних\n                    collision: (how.collision ? how.collision : 'fit flip'),\n                    using: using || how.using,\n                    within: how.within\n                },\n                close: function() {\n                    that.close();\n                },\n                appendTo: params.appendTo || how.appendTo,\n                autoclose: autoclose,\n                autofocus: autofocus,\n                withoutTail: params.withoutTail || data.withouttail || false\n            });\n        }\n    }, 'base');\n})();\n\n// ----------------------------------------------------------------------------------------------------------------- //\n\nnb.define('popup-toggler', {\n\n    events: {\n        'click': 'toggle'\n    },\n\n    oninit: function() {\n        this.data = this.nbdata()['popup-toggler'];\n        this.popup = nb.find(this.data['id']);\n        this.options = {\n            //  Относительно чего позиционировать попап.\n            //  Если заданы точные координаты в `data.where`, то по ним.\n            //  Иначе относительно ноды этого блока.\n            where: this.data.where || this.node,\n\n            //  Как позиционировать попап.\n            how: this.data.how,\n            // Без хвоста\n            withoutTail: this.data.withoutTail,\n\n            // Закрывать ли автоматически\n            autoclose: this.data.autoclose,\n\n            // Фокусировать ли автоматически\n            autofocus: this.data.autofocus,\n\n            // Куда его вставлять\n            appendTo: this.data.appendTo\n        };\n        this.trigger('nb-inited', this);\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Toggle popup</p>",
          "summary": "<p>Toggle popup</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "toggle: function(evt) {\n        if (evt) {\n            evt.preventDefault();\n        }\n        if (this.popup.isOpen()) {\n            this.close(evt);\n        } else {\n            this.open(evt);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-opened'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Open popup</p>",
          "summary": "<p>Open popup</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "open: function(evt) {\n        if (evt) {\n            evt.preventDefault();\n        }\n        if (this.isEnabled() && this.popup && !this.popup.isOpen()) {\n            this.popup.open(this.options);\n            this.trigger('nb-opened', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-closed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Close popup</p>",
          "summary": "<p>Close popup</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "close: function() {\n        if (this.isEnabled() && this.popup && this.popup.isOpen()) {\n            this.popup.close();\n            this.trigger('nb-closed', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Returns connected popup</p>",
          "summary": "<p>Returns connected popup</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getPopup: function() {\n        return this.popup;\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "params",
            "description": "\n ```\n {\n      id : 'id' — popupID or link to nb.block\n      where: '#elem' — to what elem popup attached\n      how: { my: 'left', at:'right' } — to to open popup\n  }\n ```"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Sets connected popup</p>",
          "summary": "<p>Sets connected popup</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setPopup: function(params) {\n        if (typeof params === 'string') {\n            var obj = {};\n            obj.popup = params;\n            params = obj;\n        }\n\n        if (arguments.length === 1 && typeof params === 'object' && params.popup) {\n            var id = params.popup;\n            delete params.popup;\n\n            if (params.where) {\n                this.options = params;\n            }\n\n            if (typeof id === 'string') {\n                this.popup = nb.find(id);\n            } else {\n                this.popup = id;\n            }\n            this.trigger('nb-popup-set', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Object} options"
          }
        ],
        "description": {
          "full": "<p>Get connected popup  option</p>",
          "summary": "<p>Get connected popup  option</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getOptions: function() {\n        return this.options;\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "params",
            "description": "  ```\n {\n      id : 'id' — popupID or link to nb.block\n      where: '#elem' — to what elem popup attached\n      how: { my: 'left', at:'right' } — to to open popup\n  }\n ```"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Sets connected popup options</p>",
          "summary": "<p>Sets connected popup options</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setOptions: function(params) {\n        if (arguments.length === 1 && typeof params === 'object') {\n            this.options = params;\n            this.trigger('nb-options-set', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-disabled'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "blocks for chaining"
          }
        ],
        "description": {
          "full": "<p>Disable the toggler</p><pre><code>popupToggler.disable();\n</code></pre>",
          "summary": "<p>Disable the toggler</p>",
          "body": "<pre><code>popupToggler.disable();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "disable: function() {\n        this._tabindex = this.$node.attr('tabindex');\n        this.$node.attr('tabindex', '-1');\n        this.$node.addClass('_nb-is-disabled');\n        this.trigger('nb-disabled', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-enabled'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "blocks for chaining"
          }
        ],
        "description": {
          "full": "<p>Enables the  toggler</p><pre><code>popupToggler.enable();\n</code></pre>",
          "summary": "<p>Enables the  toggler</p>",
          "body": "<pre><code>popupToggler.enable();\n</code></pre>"
        },
        "isPrivate": false,
        "ignore": false,
        "code": "enable: function() {\n        this.$node.attr('tabindex', this._tabindex || '0');\n        this.$node.removeClass('_nb-is-disabled');\n        this.trigger('nb-enabled', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "Boolean"
            ],
            "description": ""
          }
        ],
        "description": {
          "full": "<p>Return state of the toggler</p>",
          "summary": "<p>Return state of the toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isEnabled: function() {\n        return !this.$node.hasClass('_nb-is-disabled');\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-destroyed'"
          }
        ],
        "description": {
          "full": "<p>Destroy the popup toggler</p>",
          "summary": "<p>Destroy the popup toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "destroy: function() {\n        this.nbdestroy();\n    }\n\n}, 'base');"
      }
    ],
    "md": "<h3 id=\"popup\">Popup</h3>\n<p>There are 2 parts of popup control:<br>— toggler<br>— popup</p>\n<h4 id=\"options-for-popup-toggler\">Options for popup toggler</h4>\n<p><a id=\"popup-toggler\" class=\"nb link link_wrapper link_pseudo\" data-nb=\"popup-toggler\" data-nb-popup-toggler=\"{id: 'popup1'}\" href=\"#default\"><br>    <span class=\"link__inner\">Default Toggler</span><br></a></p>\n<ul>\n<li><code>id</code> {string} — id of connecte popup</li>\n<li><code>appendTo</code> {string} —  selector where append to</li>\n<li><code>how</code> {object} – <a href=\"http://api.jqueryui.com/position/\">http://api.jqueryui.com/position/</a><div class=\"code code_undefined\"><pre><code>{\n  at: '..',\n  my: '..',\n  collision: '..',\n  using: '..',\n  within '..',\n  autoclose: true\n}</code></pre></div></li>\n</ul>\n<h4 id=\"example-of-generic-popup-menu\">Example of generic popup menu</h4>\n<div><br>    <a class=\"link\" data-nb=\"popup-toggler\" data-nb-popup-toggler=\"{id: 'popup1'}\" href=\"#default\"><br>        <span class=\"link__inner\"><br>            &quot;Default&quot;<br>        </span><br>    </a><br>    <a class=\"link\" data-nb=\"popup-toggler\" data-nb-popup-toggler=\"{id: 'popup1', how: { at: 'right', my: 'left'}}\" href=\"#left\"><br>        <span class=\"link__inner\"><br>            &quot;To left&quot;<br>        </span><br>    </a><br>    <a class=\"link\" data-nb=\"popup-toggler\" data-nb-popup-toggler=\"{id: 'popup1', how: { at: 'left', my: 'right'}}\" href=\"#right\"><br>        <span class=\"link__inner\"><br>            &quot;To right&quot;<br>        </span><br>    </a><br>    <a class=\"link\" data-nb=\"popup-toggler\" data-nb-popup-toggler=\"{id: 'popup1', how: { at: 'top', my: 'bottom'}}\" href=\"#right\"><br>        <span class=\"link__inner\"><br>            &quot;To top&quot;<br>        </span><br>    </a><br></div>\n\n<blockquote>\n<div example=\"popup1\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-popup-menu({\n    'id': 'popup1'\n    'menu': [\n        {\n             'attrs': {\n                  'daria-action': 'someCoolActon'\n             }\n             'class': [\n                  'someCoolClass'\n             ]\n             'href': '#'\n             'content': 'Скопировать'\n        }\n        {\n            'href': '#'\n            'content': 'Переместить'\n        }\n        {\n            'separator': true()\n        }\n        {\n            'href': '#'\n            'content': 'Удалить'\n        }\n    ]\n})</code></pre></div></blockquote>\n<h3 id=\"options-for-menu-popup\">Options for menu popup</h3>\n<ul>\n<li><code>id</code> {string}</li>\n<li><code>class</code> {array} — additional classes</li>\n<li><code>attrs</code> {object} — custom DOM attributes</li>\n<li><code>tail</code> {string} — position of &#39;tail&#39; widget — left|right|top|bottom</li>\n<li><code>static</code> {boolean} — <code>true()</code> to prevent initialisation</li>\n<li><code>menu</code> {array} — array of objects:<ul>\n<li>Object for menu element:<ul>\n<li><code>href</code> {string}</li>\n<li><code>text</code> {string}</li>\n<li><code>attrs</code> {object} — custom DOM attributes</li>\n<li><code>class</code> {array} — additional classes</li>\n<li><code>id</code> {string}</li>\n</ul>\n</li>\n<li>Object for separator:<ul>\n<li><code>separator</code> {boolean} — <code>true()</code> to render separator</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>size: m</code></li>\n<li><code>theme: normal</code></li>\n</ul>\n<h3 id=\"options-for-generic-popup\">Options for generic popup</h3>\n<ul>\n<li><code>id</code> {string}</li>\n<li><code>class</code> {array} — additional classes</li>\n<li><code>theme</code> {string}<ul>\n<li><code>blank</code> — popup without styles</li>\n<li><code>island</code> — islands styles</li>\n</ul>\n</li>\n<li><code>attrs</code> {object} — custom DOM attributes, e.g.: <code>{ &#39;attr2: &#39;value2&#39;, &#39;attr2: &#39;value2&#39; }</code></li>\n<li><code>titleContent</code> {xml|string} —  modal&#39;s title, can be string or <code>xml</code> <em>xss warning!</em></li>\n<li><code>content</code> {xml|string} — modal&#39;s content, can be string or <code>xml</code> <em>xss warning!</em></li>\n<li><code>close</code>{object|boolean} — with default cloase with <code>true()</code> or custom object:<ul>\n<li><code>class</code> {array} — custom classes for close</li>\n<li><code>attrs</code> {object} — custom attrs for close</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"example-of-generic-popup\">Example of generic popup</h3>\n<div><br>    <a data-nb=\"popup-toggler\" data-nb-popup-toggler=\"{id: 'genericPopup'}\" href=\"#right\"><br>        <span class=\"link__inner\"><br>            &quot;generic popup&quot;<br>        </span><br>    </a><br></div>\n\n<blockquote>\n<div example=\"genericPopup\"/>\n\n<div class=\"code code_yate\"><pre><code>   nb-popup({\n       'id': 'genericPopup'\n       'title': 'Hello, I’m your generic pop-up.'\n       'content': '<p>And welcome to nanoislands</p>'\n   })</code></pre></div></blockquote>\n<div><br>    <a data-nb=\"popup-toggler\" data-nb-popup-toggler=\"{id: 'genericPopup2'}\" href=\"#default\"><br>        <span class=\"link__inner\"><br>            &quot;generic popup  with close&quot;<br>        </span><br>    </a><br></div>\n\n<blockquote>\n<div example=\"genericPopup2\"/>\n\n<div class=\"code code_yate\"><pre><code>   nb-popup({\n       'id': 'genericPopup2'\n       'close': true()\n       'title': 'Hello, I’m your generic pop-up.'\n       'content': '<p>And welcome to nanoislands</p>'\n   })</code></pre></div></blockquote>\n<h3 id=\"default-menu-popup\">Default menu popup</h3>\n<ul>\n<li><code>id</code> {string}</li>\n<li><code>class</code> {array} — additional classes</li>\n<li><code>attrs</code> {object} — custom DOM attributes</li>\n<li><code>withoutTail</code> {boolean}  </li>\n<li><code>static</code> {boolean} — <code>true()</code> to prevent initialisation</li>\n<li><code>menu</code> {array} — array of objects:<ul>\n<li>Object for menu element:<ul>\n<li><code>href</code> {string}</li>\n<li><code>text</code> {string}</li>\n<li><code>attrs</code> {object} — custom DOM attributes</li>\n<li><code>class</code> {array} — additional classes</li>\n<li><code>id</code> {string}</li>\n</ul>\n</li>\n<li>Object for separator:<ul>\n<li><code>separator</code> {boolean} — <code>true()</code> to render separator</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"menu-popup-example\">Menu popup example</h3>\n<div><br>    <a data-nb=\"popup-toggler\" data-nb-popup-toggler=\"{id: 'popup1'}\" href=\"#default\"><br>        <span class=\"link__inner\"><br>            &quot;Popup menu&quot;<br>        </span><br>    </a><br></div>\n\n<blockquote>\n<div class=\"code code_yate\"><pre><code>   nb-popup-menu({\n       'id': 'popupMenu'\n       'menu': [\n           {\n               'href': '#'\n               'content': 'Скопировать'\n           }\n           {\n               'href': '#'\n               'content': 'Переместить'\n           }\n           {\n               'href': '#'\n               'content': 'Удалить'\n           }\n       ]\n   })</code></pre></div></blockquote>\n<h3 id=\"modal-popup\">Modal popup</h3>\n<ul>\n<li><code>data-nb</code> {object}<ul>\n<li><code>modal</code>: <code>true()</code></li>\n<li><code>width</code>: <code>auto</code></li>\n<li><code>height</code>: <code>auto</code></li>\n<li><code>minHeight</code>: <code>auto</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"options-for-modal-popup\">Options for modal popup</h3>\n<ul>\n<li><code>id</code> {string}</li>\n<li><code>class</code> {array} — additional classes</li>\n<li><code>attrs</code> {object} — custom DOM attributes</li>\n<li><code>titleContent</code> {xml|string} — modal&#39;s title, can be string or <code>xml</code> <em>xss warning!</em></li>\n<li><code>content</code> {xml|string} — modal&#39;s content, can be string or <code>xml</code> <em>xss warning!</em></li>\n<li><code>buttons</code> {xml|array} — popup&#39;s buttons:</li>\n<li><code>close</code> {nodeset} — popup&#39;s close button:<ul>\n<li><code>attrs</code> {object} — custom DOM attributes for close button</li>\n</ul>\n</li>\n<li><code>data-nb</code> {object} — popup display paramenters, renteded as <code>data-nb-*</code> attributes<ul>\n<li><code>modal</code> {boolean}</li>\n<li><code>width</code> {string}</li>\n<li><code>height</code> {string}</li>\n<li><code>minHeight</code> {string}</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"modal-popup-example-\">Modal popup example:</h3>\n<div><br>    <a data-nb=\"popup-toggler\" data-nb-popup-toggler=\"{id: 'popup-modal1'}\" href=\"#modal\"><br>        <span class=\"link__inner\"><br>            &quot;Modal popup&quot;<br>        </span><br>    </a><br></div>\n\n<blockquote>\n<div example=\"popup-modal1\"/>\n\n<div class=\"code code_yate\"><pre><code>   nb-popup-modal({\n      'id': 'popup-modal1'\n      'title': 'Some modal popup'\n      'content': 'Some text for that popup'\n      'data-nb': {\n           'width': '300px'\n      }\n      'close': {\n           'class': 'ns-action'\n           'attrs': {\n               'data-params': '123'\n           }\n      }\n      'buttons': {\n           'class': 'ns-subliew-buttons'\n           'data': [\n           {\n              'content': 'Отправить'\n              'size': 'm'\n              'theme': 'action'\n              'class': 'nb-popup__button'\n           }\n           {\n              'content': 'Сохранить'\n              'size': 'm'\n              'class': 'nb-popup__button'\n           }\n       ]}\n\n  })</code></pre></div><h2 id=\"jsdoc\">JSDOC</h2>\n</blockquote>\n"
  },
  {
    "block": "progress",
    "jsdoc": [
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String",
              "Number"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-value-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set value of the progress</p>",
          "summary": "<p>Set value of the progress</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setValue: function(value) {\n        var val = parseFloat(value);\n\n        this.$control.val(val);\n        this.$bar.css({width: val + '%'});\n\n        if (this.type == 'percentage') {\n            this.$title.html(val + '%');\n        }\n        this.trigger('nb-value-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String} value"
          }
        ],
        "description": {
          "full": "<p>Get value of the progress</p>",
          "summary": "<p>Get value of the progress</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getValue: function() {\n        return this.$control.val();\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Change value of the progress by 1</p>",
          "summary": "<p>Change value of the progress by 1</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "tick: function() {\n        var val = parseFloat(this.getValue());\n\n        if (val < 100) {\n            val++;\n        }\n\n        this.setValue(val);\n        this.trigger('nb-changed', this);\n\n        return this;\n    }\n}, 'base');"
      }
    ],
    "md": "<h3 id=\"default-progress\">Default progress</h3>\n<blockquote>\n<div example=\"progress\"/>\n\n<div class=\"code code_yate\"><pre><code>    nb-progress()</code></pre></div></blockquote>\n<p>Progress indicator with progressbar and ticking percentage, initialised at 0%:</p>\n<ul>\n<li><code>bar</code>: <code>true()</code></li>\n<li><code>start</code>: <code>0</code></li>\n<li><code>type</code>: <code>percentage</code></li>\n<li><code>title</code>: <code> </code></li>\n</ul>\n<h3 id=\"options\">Options</h3>\n<ul>\n<li><code>bar</code> {boolean} — <code>false()</code> to display percentage text only</li>\n<li><code>title</code> {string} — text to be displayed in a progress-bar instead of a percentage ticker</li>\n<li><code>start</code> {number} — start value</li>\n<li><code>type</code> {string} — <code>title</code> to display title instead of pecentage</li>\n</ul>\n<h3 id=\"examples\">Examples</h3>\n<p>Same thing, but in title mode and starting at 30%:</p>\n<blockquote>\n<div example=\"progress-title\"/>\n\n<div class=\"code code_yate\"><pre><code>    nb-progress({\n        'id': 'progress1'\n        'start': '30'\n        'type': 'title'\n        'title': 'Король_Лев_5_rutracker.org'\n    })</code></pre></div></blockquote>\n"
  },
  {
    "block": "radio-button",
    "md": "<h3 id=\"basic-usage-example-\">Basic usage example:</h3>\n<blockquote>\n<div example=\"radio-buttons\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-radio-button({\n      'size': 'm'\n      'name': 'btn'\n      'group':  [\n          {\n              'content': 'All'\n              'value': 'btn1'\n          }\n          {\n              'content': 'Unread'\n              'value': 'btn3'\n              'checked': true()\n          }\n          {\n              'content': 'Read'\n              'value': 'btn4'\n          }\n          {\n              'content': 'Delete'\n              'value': 'btn2'\n              'disabled': true()\n          }\n      ]\n    })</code></pre></div></blockquote>\n<ul>\n<li>Horizontal compound block</li>\n<li>consists of several buttons</li>\n<li>behaves like a group of radio-buttons</li>\n</ul>\n<p>To get a group of actial <em>radiobuttons</em> (like those you can get using vanilla HTML) use <code>checkbox</code> with corresponding options.</p>\n<p>Default options:</p>\n<ul>\n<li>size: m</li>\n<li>theme: normal</li>\n</ul>\n<h3 id=\"options\">Options</h3>\n<ul>\n<li><code>&#39;id&#39;</code> {string}</li>\n<li><code>&#39;size&#39;</code> {string} <code>s / m / l</code></li>\n<li><code>&#39;theme&#39;</code> {string} <code>normal / action (yellow) / dark / pseudo / promo (big yellow)</code></li>\n<li><code>&#39;class&#39;</code> {array}  — additional classes for radio-button</li>\n<li><code>&#39;group&#39;</code> {array} — array of hashes, each hash describes a button:<ul>\n<li><code>&#39;content&#39;</code> {string} ... — string of button&#39;s content</li>\n<li><code>&#39;value&#39;</code> {string}... — corresponding value</li>\n<li><code>&#39;name&#39;</code> {string} ... — name for radio-button</li>\n<li><code>&#39;tabindex&#39;</code> {string} — tabindex</li>\n<li><code>&#39;icon&#39;</code> {string} ... — icon name</li>\n<li><code>&#39;checked&#39;</code> {boolean} — checked element of radio-group</li>\n<li><code>&#39;disabled&#39;</code> {boolean}  — for disabled element</li>\n</ul>\n</li>\n</ul>\n"
  },
  {
    "block": "select",
    "jsdoc": [
      {
        "tags": [],
        "description": {
          "full": "<h2>JS</h2>\n<h3>jQuery UI Depends:</h3>\n<ul>\n<li>jquery.ui.autocomplete.js</li>\n<li>jquery.ui.button.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.widget.js</li>\n<li>jquery.ui.position.js</li>\n<li>jquery.ui.menu.js</li>\n</ul>\n",
          "summary": "<h2>JS</h2>\n<h3>jQuery UI Depends:</h3>\n",
          "body": "<ul>\n<li>jquery.ui.autocomplete.js</li>\n<li>jquery.ui.button.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.widget.js</li>\n<li>jquery.ui.position.js</li>\n<li>jquery.ui.menu.js</li>\n</ul>\n"
        },
        "isPrivate": false,
        "ignore": false
      },
      {
        "tags": [
          {
            "type": "augments",
            "otherClass": "nb.block.Base"
          }
        ],
        "description": {
          "full": "<p>@class nb.block.Select</p>",
          "summary": "<p>@class nb.block.Select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "nb.define('select', {\n        events: {\n            'mousedown': '_onclick'\n            //'open' { event, ui}\n            //'close' { event, ui}\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-inited'"
          },
          {
            "type": "constructor",
            "string": ""
          }
        ],
        "description": {
          "full": "<p>Init select</p>",
          "summary": "<p>Init select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "oninit: function() {\n            this.isOpen = false;\n            this.$control = this.$node.find('select');\n            this.data = this.nbdata();\n            this.$dropdown = this.$node.children('.nb-select-dropdown').appendTo(this.data.appendto || 'body');\n\n            this._updateFromSelect();\n\n            // degradation to native control in IE < 9\n            if (nb.IE_LT9) {\n                var that = this;\n                this.$control.on('change', function(e) {\n                    that.setState({\n                        value: e.target.value\n                    });\n                });\n            } else {\n                // preparing control depending on configuration and content\n                this.controlPrepare();\n            }\n\n            this.trigger('nb-inited', this);\n        },"
      },
      {
        "tags": [],
        "description": {
          "full": "<p>preparing control depending on configuration and content</p>",
          "summary": "<p>preparing control depending on configuration and content</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "controlPrepare: function() {\n            var that = this;\n            // preparing position parameters for popup from direction data\n            var position = {};\n            position.collision = 'flip';\n\n            if (that.data.within) {\n                position.within = that.data.within;\n            }\n\n            if (that.data.direction == 'top') {\n                position.my = \"left bottom\";\n                position.at = \"left top\";\n\n            } else {\n                position.my = \"left top\";\n                position.at = \"left bottom\";\n            }\n\n            that._returnOptItem = function(item) {\n                var $item = $(item);\n                var icon = $item.data('icon');\n                var result = {};\n                if ($item.attr('separator')) {\n                    result = {\n                        separator: true,\n                        option: item\n                    };\n                } else {\n                    result = {\n                        label: $item.text(),\n                        value: $item.val(),\n                        option: item\n                    };\n                    if (icon) {\n                        result['icon'] = icon;\n                    }\n                }\n                return result;\n            };\n\n            // select JUI control init\n            that.$node.autocomplete({\n                disabled: that.$node.hasClass('_nb-is-disabled'),\n                delay: 0,\n                minLength: 0,\n                autoFocus: false,\n                position: position,\n                appendTo: that.$dropdown,\n                source: function(request, response) {\n                    response(that.$control.children(['option', 'optgroup']).map(function() {\n                        var returnObj;\n                        var $this = $(this);\n\n                        if (this.tagName == 'OPTGROUP') {\n                            returnObj = {\n                                type: 'group',\n                                label: $this.attr('label'),\n                                option: this,\n                                group: $this.children('option').map(function() {\n                                    return that._returnOptItem(this);\n                                })\n                            };\n                        } else {\n                            returnObj = that._returnOptItem(this);\n                        }\n\n                        return returnObj;\n                    }));\n                },\n                select: function(event, ui) {\n                    if (ui.item.type != 'group') {\n                        ui.item.option.selected = true;\n\n                        that.$jUI._trigger('selected', event, {\n                            item: ui.item.option\n                        });\n                    }\n                },\n                // delegate handler on 'outer' click on open\n                open: function() {\n                    that.$jUI._on(that.$jUI.document, {\n                        // on 'outer' mousedown close control\n                        mousedown: function(e) {\n                            if (e.which == 1 && !$.contains(that.$jUI.element.get(0), e.target) && !$.contains(that.$dropdown[0], e.target)) {\n                                this.close();\n                            }\n                        }\n                    });\n                    that.trigger('nb-opened', that);\n                },\n\n                close: function() {\n                    that.$jUI._off(that.$jUI.document, 'mousedown');\n                    that.trigger('nb-closed', that);\n                }\n            }).addClass('ui-widget ui-widget-content');\n\n            that.$jUI = that.$node.data('uiAutocomplete');\n\n            that.$node.on('autocompleteopen', function() {\n                that.isOpen = true;\n            });\n\n            that.$node.on('autocompleteclose', function() {\n                that.isOpen = false;\n            });\n\n// redefine one menu item rendering method, fires every time, then popup opening\n            that.$jUI._renderItem = function(ul, item) {\n                var $itemNode = $('<li class=\"_nb-select-item\"></li>');\n\n                if (item.option.selected) {\n                    $itemNode.addClass('is-selected');\n                }\n\n                if (item.type == 'group') {\n\n                    $itemNode.addClass('_nb-select-group-item');\n                    var $innerUL = $('<ul></ul>');\n\n                    item.group.each(function(index, item) {\n                        that.$jUI._renderItem($innerUL, item);\n                    });\n\n                    $itemNode.append($innerUL);\n                }\n\n                if (item.separator) {\n                    $itemNode.addClass('_nb-select-seperator-item');\n                } else {\n                    $itemNode.data('ui-autocomplete-item', item);\n\n                    var $itemNodeContent = $('<a class=\"_nb-select-a\"></a>');\n\n                    if (item.type == 'group') {\n                        $itemNodeContent.html('<span class=\"_nb-select-text\">' + item.label + '</span>');\n                    } else {\n                        $itemNodeContent.text(item.label).appendTo($itemNodeContent);\n                    }\n\n                    if (item.icon) {\n                        $itemNodeContent.prepend('<img class=\"nb-icon nb-s-' + item.icon + '-icon\" src=\"//yandex.st/lego/_/La6qi18Z8LwgnZdsAr1qy1GwCwo.gif\">');\n                    }\n\n                    $itemNode.append($itemNodeContent);\n                }\n\n                $itemNode.appendTo(ul);\n                return $itemNode;\n            };\n\n// redefine valueMethod, extend with button text changing and fallback select value changing\n// if value not provided, return current value of fallback select\n            that.$jUI.valueMethod = function(value) {\n\n                if (typeof value === 'string') {\n                    var text = that.$control.find('option[value=\"' + value + '\"]').text();\n                    that.setState({\n                        value: value,\n                        text: text\n                    });\n                }\n                return that.$selected.val();\n            };\n\n// safe original function\n            that.$jUI.__resizeMenu = that.$jUI._resizeMenu;\n\n            that.$jUI._resizeMenu = function() {\n                // set maxHeight before the menu is displayed\n                if (that.data.maxheight) {\n                    that._setMaxHeight(that.data.maxheight);\n                }\n\n                this.__resizeMenu();\n            };\n\n            that.$jUI.menu.element.on('click', function(evt) {\n                evt.stopPropagation();\n            });\n        },"
      },
      {
        "tags": [
          {
            "type": "private",
            "visibility": "private"
          }
        ],
        "description": {
          "full": "<p>Save value and text from <select> node.</p>",
          "summary": "<p>Save value and text from <select> node.</p>",
          "body": ""
        },
        "isPrivate": true,
        "ignore": true,
        "code": "_updateFromSelect: function() {\n            // get selected <option/>\n            this.$selected = this.$control.find(':selected');\n\n            this.value = this.$selected.val();\n            // &nbsp; - to prevent button from collapse if no text on <option/>\n            this.text = this.$selected.text();\n            this.icon = this.$selected.data('icon');\n\n            this._setText({ text: this.text, icon: this.icon});\n        },\n\n        _onclick: function(evt) {\n            if (this.$node && this.$node.data('uiAutocomplete')) {\n                evt.preventDefault();\n                // close if already visible\n                if (this.isOpen) {\n                    this.close();\n                } else if (this.isEnabled()) {\n                    this.open();\n                    this.$node.focus();\n                }\n            }\n        },\n\n        _setText: function(params) {\n            var content = this.$node.find('._nb-button-content');\n            if (params.text || params.icon) {\n                // use .text() to prevent XSS\n                content.text(params.text);\n                if (params.icon) {\n                    this.$node.addClass('_nb-with-icon');\n                    if (!params.text) {\n                        this.$node.addClass('_nb-with-only-button');\n                    }\n                    content.prepend('<img class=\"nb-icon nb-s-' + params.icon + '-icon\" src=\"//yandex.st/lego/_/La6qi18Z8LwgnZdsAr1qy1GwCwo.gif\">');\n                }\n            } else {\n                // &nbsp; - to prevent button from collapse if no text on <option/>\n                this.$node.find('._nb-button-content').html('&nbsp;');\n            }\n\n        },\n\n        _setMaxHeight: function(maxheight) {\n            var height;\n            if (/^\\d+$/.test(maxheight)) {\n                var item = this.$jUI.menu.element.find('._nb-select-item').first();\n                height = parseInt(item.height()) * maxheight;\n            } else {\n                height = maxheight;\n            }\n\n            this.$jUI.menu.element.css({\n                'max-height': height,\n                'overflow-y': 'auto',\n                'overflow-x': 'hidden'\n            });\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-rendered'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Render dropdown of the select</p>",
          "summary": "<p>Render dropdown of the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "render: function() {\n            if (!this.isEnabled()) {\n                return this;\n            }\n\n            // pass empty string as value to search for, displaying all results\n            this.$node.autocomplete('search', '');\n\n            this.trigger('nb-rendered', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-opened'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Open dropdown of the select</p>",
          "summary": "<p>Open dropdown of the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "open: function() {\n            if (this.$node && this.$node.data('uiAutocomplete') && this.isEnabled()) {\n                this.render();\n            }\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-closed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Close dropdown of the select</p>",
          "summary": "<p>Close dropdown of the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "close: function() {\n            if (this.$node && this.$node.data('uiAutocomplete')) {\n                this.$node.autocomplete('close');\n                this.trigger('nb-closed', this);\n            }\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "params",
            "description": "— {     text: '..'\n    value: '..'\n}"
          },
          {
            "type": "fires",
            "string": "'nb-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Changes a value of control, text on the button and select value it the fallback</p>",
          "summary": "<p>Changes a value of control, text on the button and select value it the fallback</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setState: function(params) {\n            params = params || {};\n\n            if (this.value !== params.value) {\n                var selected;\n\n                if (params.value) {\n                    selected = this.$control.find('option[value=\"' + params.value + '\"]').first();\n                } else {\n                    selected = this.$control.find('option:contains(' + params.text + ')').first();\n                }\n\n                if (selected.length !== 0) {\n                    this.$selected.prop('selected', false);\n\n                    this.$selected = selected;\n\n                    this.$selected.prop('selected', true);\n\n                    this.value = this.$selected.val();\n\n                    this.text = this.$selected.text();\n                    this.icon = this.$selected.data('icon');\n\n                    this._setText({ text: this.text, icon: this.icon});\n\n                    this.trigger('nb-changed', this);\n\n                    this.$control.val(params.value);\n\n                }\n            }\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "- {\n    value: '..'\n    text: '..'\n}"
          }
        ],
        "description": {
          "full": "<p>Returns state of the select</p>",
          "summary": "<p>Returns state of the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getState: function() {\n            return {\n                value: this.value,\n                text: this.text\n            };\n        },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String|Object} name"
          }
        ],
        "description": {
          "full": "<p>Get name of the select</p>",
          "summary": "<p>Get name of the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getName: function() {\n            return this.$control.prop('name');\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "string"
            ],
            "name": "name",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-name-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Changes a value of control, text on the button and select value it the fallback</p>",
          "summary": "<p>Changes a value of control, text on the button and select value it the fallback</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setName: function(name) {\n            this.$control.prop('name', name);\n            this.trigger('nb-name-set', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-disabled'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Disables the select</p>",
          "summary": "<p>Disables the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "disable: function() {\n            if (this.isEnabled()) {\n                this.$node.addClass('_nb-is-disabled');\n                this._tabindex = this.$node.attr('tabindex');\n                this.$node.attr('tabindex', '-1');\n                this.$node.attr('_nb-is-disabled');\n                if (!nb.IE_LT9) {\n                    this.$node.autocomplete('disable');\n                }\n                this.$control.attr('disabled', 'disabled');\n                this.trigger('nb-disabled', this);\n            }\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-enabled'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Enables the select</p>",
          "summary": "<p>Enables the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "enable: function() {\n            if (!this.isEnabled()) {\n                this.$node.attr('tabindex', this._tabindex || '0');\n                this.$node.removeClass('_nb-is-disabled');\n                if (!nb.IE_LT9) {\n                    this.$node.autocomplete('enable');\n                }\n                this.$control.removeAttr('disabled');\n                this.trigger('nb-enabled', this);\n            }\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Boolean}"
          }
        ],
        "description": {
          "full": "<p>Return state of the select</p>",
          "summary": "<p>Return state of the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isEnabled: function() {\n            return !this.$node.hasClass('_nb-is-disabled');\n        },"
      },
      {
        "tags": [
          {
            "type": "params",
            "string": "{Array} source New source"
          },
          {
            "type": "fires",
            "string": "'nb-source-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set new items for select</p>",
          "summary": "<p>Set new items for select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setSource: function(source) {\n\n            if (!source) {\n                return this;\n            }\n\n            if (!(source instanceof Array)) {\n                source = [source];\n            }\n\n            // find all selected items\n            var selected = [];\n            source.forEach(function(item) {\n                if (item.selected) {\n                    selected.push(item);\n                }\n            });\n\n            // leave only last selected item (this is native browser behaviour)\n            selected.slice(0, -1).forEach(function(item) {\n                item.selected = false;\n            });\n\n            // render options with yate to prevent XSS\n            var html = yr.run(this.getYateModuleName(), {\n                items: source\n            }, 'nb-select-options');\n\n            // set new source for select\n            this.$control.empty().append(html);\n\n            this._updateFromSelect();\n            this.trigger('nb-source-changed', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Array} source"
          }
        ],
        "description": {
          "full": "<p>Get items from select</p>",
          "summary": "<p>Get items from select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getSource: function() {\n            return $.map(this.$control.children('option'), function(node) {\n                var $node = $(node);\n                return {\n                    text: $node.text(),\n                    value: $node.val(),\n                    selected: $node.prop('selected')\n                };\n            });\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Array",
              "Object"
            ],
            "name": "items",
            "description": ""
          },
          {
            "type": "param",
            "types": [
              "Number"
            ],
            "name": "index",
            "description": "to insert"
          },
          {
            "type": "fires",
            "string": "'nb-source-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Add items to select</p>",
          "summary": "<p>Add items to select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "addToSource: function(items, index) {\n            var source = this.getSource();\n\n            if (!(items instanceof Array)) {\n                items = [items];\n            }\n\n            var selectedItemValue = null;\n\n            var insertion = items.filter(function(item) {\n                var newItem = source.indexOf(item) === -1;\n                if (newItem) {\n                    if (item.selected) {\n                        // stores last selected item\n                        selectedItemValue = item.value;\n                    }\n                    return true;\n                }\n                return false;\n            }, this);\n\n            if (isNaN(index)) {\n                index = source.length;\n            }\n\n            insertion.forEach(function(item, i) {\n                source.splice(index + i, 0, item);\n            }, this);\n\n            this.setSource(source);\n\n            // set state from new items\n            if (selectedItemValue) {\n                // use #setState() to fire 'nb-changed' event\n                this.setState({\n                    value: selectedItemValue\n                });\n            }\n            this.trigger('nb-source-changed', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Array",
              "Object",
              "number"
            ],
            "name": "items",
            "description": "or index"
          },
          {
            "type": "fires",
            "string": "'nb-source-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Remove items to select</p>",
          "summary": "<p>Remove items to select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "removeFromSource: function(param) {\n            var source = this.getSource();\n\n            var index;\n\n            if (typeof param == 'number' || typeof param == 'string') {\n                index = parseInt(param);\n            } else if (!(param instanceof Array)) {\n                param = [param];\n            }\n\n            if (index || index === 0) {\n                source.splice(index, 1);\n            } else {\n                param.forEach(function(item) {\n                    source = source.filter(function(obj) {\n                        return obj.text != item.text && obj.value != item.value;\n                    });\n                }, this);\n            }\n\n            this.setSource(source);\n            this.trigger('nb-source-changed', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-focused'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Focus the select</p>",
          "summary": "<p>Focus the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "focus: function() {\n            if (this.isEnabled()) {\n                this.$node.focus();\n            }\n            this.trigger('nb-focused', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-blured'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Blur the select</p>",
          "summary": "<p>Blur the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "blur: function() {\n            if (this.isEnabled()) {\n                this.$node.blur();\n            }\n            this.trigger('nb-blured', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Object.<string",
              ""
            ],
            "name": "number>}",
            "description": "option — {      name: value —  имя и значение опцииопции\n}"
          },
          {
            "type": "fires",
            "string": "'nb-option-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Sets option to the jUI widget<br /><a href=\"http://api.jqueryui.com/autocomplete/#method-option\">http://api.jqueryui.com/autocomplete/#method-option</a></p>",
          "summary": "<p>Sets option to the jUI widget<br /><a href=\"http://api.jqueryui.com/autocomplete/#method-option\">http://api.jqueryui.com/autocomplete/#method-option</a></p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setOption: function(option) {\n            this.$node.autocomplete('option', option);\n            this.trigger('nb-option-set', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "option",
            "description": ""
          },
          {
            "type": "returns",
            "string": "{String} option value"
          }
        ],
        "description": {
          "full": "<p>Gets option of the jUI widget<br /><a href=\"http://api.jqueryui.com/autocomplete/#method-option\">http://api.jqueryui.com/autocomplete/#method-option</a></p>",
          "summary": "<p>Gets option of the jUI widget<br /><a href=\"http://api.jqueryui.com/autocomplete/#method-option\">http://api.jqueryui.com/autocomplete/#method-option</a></p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getOption: function(option) {\n            return this.$node.autocomplete('option', option);\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-destroyed'"
          }
        ],
        "description": {
          "full": "<p>Destroy the select</p>",
          "summary": "<p>Destroy the select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "destroy: function() {\n            if (this.$node && this.$node.data('uiAutocomplete')) {\n                this.$node.autocomplete('destroy');\n                this.$dropdown.empty().appendTo(this.$node);\n            }\n            this.trigger('nb-destroyed', this);\n            this.nbdestroy();\n        }\n    },\n    'base');"
      }
    ],
    "md": "<ul>\n<li>size: m</li>\n<li>theme: normal</li>\n<li>direction: bottom</li>\n</ul>\n<h3 id=\"optional-attributes\">Optional attributes</h3>\n<ul>\n<li><code>&#39;size&#39;</code> {string} <code>m / s</code></li>\n<li><code>&#39;theme&#39;</code> {string} <code>normal / action (yellow) / dark / pseudo</code></li>\n<li><code>&#39;id&#39;</code> {string} block@id and select@name</li>\n<li><code>&#39;name&#39;</code> {string}</li>\n<li><code>&#39;direction&#39;</code> {string} bottom / top — open default direction</li>\n<li><code>&#39;class&#39;</code> {array} <code>[&#39;my_class1&#39;, &#39;my_class2&#39;]</code></li>\n<li><code>&#39;disabled&#39;</code> {boolean}</li>\n<li><code>&#39;tabindex&#39;</code> {string} — tabindex</li>\n<li><code>&#39;maxHeight&#39;</code> {Number|String} number of visible items or string value of the max-height like &#39;10em&#39;</li>\n<li><code>&#39;within&#39;</code> {string} &#39;...&#39; - id attr of the container where listing tries to fit in (window default)</li>\n<li><code>&#39;appendto&#39;</code> {string} — selector where show be placed select dropdown</li>\n<li><code>&#39;items&#39;</code> {array}  - each object in array could have text, value and selected fields<ul>\n<li><code>&#39;text&#39;</code> {string} text of option</li>\n<li><code>&#39;value&#39;</code> {string} value of option</li>\n<li><code>&#39;icon&#39;</code> {string} &#39;three-dots&#39;</li>\n<li><code>&#39;selected&#39;</code> {boolean}</li>\n<li><code>&#39;separator&#39;</code> {boolean}</li>\n<li><code>&#39;group&#39;</code> {array} - group of options, array of items in <code>optgroup</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"yate-examples\">Yate examples</h3>\n<h4 id=\"default\">Default</h4>\n<p><div example=\"selects-simple\"/></p>\n<blockquote>\n<div class=\"code code_yate\"><pre><code>nb-select({\n    'items': [\n        {\n           'icon': 'twitter'\n           'text': 'Twitter'\n           'value': 'option0'\n           'selected': 'true'\n        }\n        {\n           'icon': 'vk'\n           'text': 'VK'\n           'value': 'option1'\n        }\n        {\n           'text': 'Ещё'\n           'value': 'option4'\n           'icon': 'three-dots'\n        }\n    ]\n})\n\" Текст рядом с селектами\"</code></pre></div></blockquote>\n<h4 id=\"sizes\">Sizes</h4>\n<p><code>m</code> / <code>s</code></p>\n<blockquote>\n<div example=\"selects-size\"/>\n\n<div class=\"code code_yate\"><pre><code>   nb-select({\n       'size': 'm'\n       'items': [\n           {\n              'icon': 'twitter'\n              'text': 'Twitter'\n              'value': 'option0'\n              'selected': 'true'\n           }\n           {\n              'icon': 'vk'\n              'text': 'VK'\n              'value': 'option1'\n           }\n           {\n              'text': 'Ещё'\n              'value': 'option4'\n              'icon': 'three-dots'\n           }\n       ]\n   })\n   ' '\n   nb-select({\n       'size': 's'\n       'items': [\n           {\n              'icon': 'twitter'\n              'text': 'Twitter'\n              'value': 'option0'\n              'selected': 'true'\n           }\n           {\n              'icon': 'vk'\n              'text': 'VK'\n              'value': 'option1'\n           }\n           {\n              'text': 'Ещё'\n              'value': 'option4'\n              'icon': 'three-dots'\n           }\n       ]\n   })\n   \" Текст рядом с селектами\"\n`</code></pre></div></blockquote>\n<h4 id=\"themes\">Themes</h4>\n<p><code>normal / pseudo / dark / action (yellow)</code></p>\n<blockquote>\n<div example=\"selects-theme\"/>\n\n<div class=\"code code_yate\"><pre><code> nb-select({\n     'size': 'm'\n     'id': 'select1'\n     'attrs': {\n     'name': 'myname'\n     }\n     'class': 'my-test-class'\n     'items': [\n         {\n             'text': 'Карта'\n             'value': 'option1'\n         }\n         {\n             'text': 'Спутник'\n             'value': 'option2'\n         }\n         {\n             'text': 'Гибрид'\n             'value': 'option3'\n         }\n     ]\n })\n ' '\n nb-select( {\n   'size': 'm'\n   'id': 'select3'\n   'class': 'my-test-class'\n   'theme': 'pseudo'\n   'items': [\n       {\n           'text': 'Карта'\n           'value': 'option1'\n           'selected': 'true'\n       }\n       {\n           'text': 'Спутник'\n           'value': 'option2'\n       }\n       {\n           'text': 'Гибрид'\n           'value': 'option3'\n       }\n   ]\n })\n ' '\n nb-select( {\n   'size': 'm'\n   'id': 'select4'\n   'class': 'my-test-class'\n   'theme': 'dark'\n   'items': [\n       {\n           'text': 'Карта'\n           'value': 'option1'\n           'selected': 'true'\n       }\n       {\n           'text': 'Спутник'\n           'value': 'option2'\n       }\n       {\n           'text': 'Гибрид'\n           'value': 'option3'\n       }\n   ]\n })\n ' '\n nb-select( {\n   'size': 'm'\n   'id': 'select5'\n   'class': 'my-test-class'\n   'theme': 'action'\n   'attrs': {\n     'style': 'width: 120px'\n   }\n   'items': [\n       {\n           'text': 'Народная карта'\n           'value': 'option0'\n           'selected': 'true'\n       }\n       {\n           'text': 'Карта'\n           'value': 'option1'\n       }\n   ]\n })</code></pre></div></blockquote>\n<h4 id=\"disabled\">Disabled</h4>\n<blockquote>\n<div example=\"selects-disabled\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-select({\n    'disabled': true()\n    'items': [\n        {\n           'icon': 'twitter'\n           'text': 'Twitter'\n           'value': 'option0'\n           'selected': 'true'\n        }\n        {\n           'icon': 'vk'\n           'text': 'VK'\n           'value': 'option1'\n        }\n        {\n           'text': 'Ещё'\n           'value': 'option4'\n           'icon': 'three-dots'\n        }\n    ]\n})\n\" Текст рядом с селектами\"</code></pre></div></blockquote>\n<h4 id=\"direction\">Direction</h4>\n<blockquote>\n<div example=\"selects-direction\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-select({\n    'direction': 'top'\n    'items': [\n        {\n           'icon': 'twitter'\n           'text': 'Twitter'\n           'value': 'option0'\n           'selected': 'true'\n        }\n        {\n           'icon': 'vk'\n           'text': 'VK'\n           'value': 'option1'\n        }\n        {\n           'text': 'Ещё'\n           'value': 'option4'\n           'icon': 'three-dots'\n        }\n    ]\n})</code></pre></div></blockquote>\n<h4 id=\"maxheight\">maxHeight</h4>\n<p>{Number|String} number of visible items or string value of the max-height like &#39;10em&#39;</p>\n<blockquote>\n<div example=\"selects-mh\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-select({\n    'maxHeight': 3\n    'items': [\n        {\n           'icon': 'twitter'\n           'text': 'Twitter'\n           'value': 'option0'\n           'selected': 'true'\n        }\n        {\n           'icon': 'vk'\n           'text': 'VK'\n           'value': 'option1'\n        }\n        {\n           'icon': 'vk'\n           'text': 'VK'\n           'value': 'option1'\n        }\n        {\n           'text': 'Ещё'\n           'value': 'option4'\n           'icon': 'three-dots'\n        }\n    ]\n})</code></pre></div></blockquote>\n<h4 id=\"group\">Group</h4>\n<blockquote>\n<div example=\"selects-group\"/>\n\n<div class=\"code code_yate\"><pre><code>   nb-select( {\n       'id': 'select-gropu1'\n       'class': 'my-test-class'\n       'items': [\n           {\n               'text': 'Карта'\n               'value': 'option1'\n               'selected': 'true'\n           }\n           {\n               'text': 'Спутник'\n               'value': 'option2'\n           }\n           {\n               'text': 'Гибрид'\n               'value': 'option3'\n           }\n\n           {\n               'text': 'Группа'\n               'group': [\n                     {\n                         'text': 'Супер Карта'\n                         'value': 'option4'\n                     }\n                     {\n                         'text': 'Супер Спутник'\n                         'value': 'option5'\n                     }\n                     {\n                         'text': 'Супер Гибрид'\n                         'value': 'option6'\n                     }\n               ]\n           }\n       ]\n   })</code></pre></div></blockquote>\n"
  },
  {
    "block": "slider",
    "jsdoc": [
      {
        "tags": [],
        "description": {
          "full": "<h3>jQuery UI Depends:</h3>\n<ul>\n<li>jquery.ui.slider.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.mouse.js</li>\n<li>jquery.ui.widget.js</li>\n</ul>\n",
          "summary": "<h3>jQuery UI Depends:</h3>\n<ul>\n<li>jquery.ui.slider.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.mouse.js</li>\n<li>jquery.ui.widget.js</li>\n</ul>\n",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "nb.define('slider', {"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-inited'"
          }
        ],
        "description": {
          "full": "<p>Init the slider</p>",
          "summary": "<p>Init the slider</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "oninit: function() {\n        var that = this;\n\n        this.data = this.nbdata();\n        this.$control = this.$node.find('._nb-slider-fallback');\n        this.$body = this.$node.children('._nb-slider-body');\n\n        this.$body.show();\n\n        this.$body.slider({\n            range: 'min',\n            disabled: this.$node.hasClass('_nb-is-disabled'),\n            value: parseFloat(this.data.value),\n            change: function(e, ui) {\n                this.$control.val(ui.value);\n            }.bind(this)\n        });\n\n        this.$body.on('slidestop', function(event, ui) {\n            that.trigger('nb-slider_slidestop', ui.value);\n        });\n\n        this.$body.on('slidestart', function(event, ui) {\n            that.trigger('nb-slider_slidestart', ui.value);\n        });\n\n        this.$body.on('slide', function(event, ui) {\n            that.trigger('nb-slider_slide', ui.value);\n        });\n\n\n        this.trigger('nb-inited', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Number"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-value-set'"
          }
        ],
        "description": {
          "full": "<p>Set specified value to slider</p>",
          "summary": "<p>Set specified value to slider</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setValue: function(value) {\n        if (this.$body.slider('option', 'disabled')) {\n            return this;\n        }\n        this.$body.slider('value', value);\n        this.trigger('nb-value-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "Number"
            ],
            "description": "value"
          }
        ],
        "description": {
          "full": "<p>Return slider&#39;s value</p>",
          "summary": "<p>Return slider&#39;s value</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getValue: function() {\n        return this.$body.slider('option', 'value');\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String",
              "Number"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-name-set'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "nb.block"
          }
        ],
        "description": {
          "full": "<p>Set name of the fallback input</p>",
          "summary": "<p>Set name of the fallback input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setName: function(value) {\n        this.$control.prop('name', value);\n        this.trigger('nb-name-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "String",
              "Boolean"
            ],
            "description": "name"
          }
        ],
        "description": {
          "full": "<p>Get name of the fallback input</p>",
          "summary": "<p>Get name of the fallback input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getName: function() {\n        return this.$control.prop('name');\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-disabled'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "nb.block"
          }
        ],
        "description": {
          "full": "<p>Set disabled state</p>",
          "summary": "<p>Set disabled state</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "disable: function() {\n        this.$node.addClass('_nb-is-disabled');\n        this.$body.slider('disable');\n        this.trigger('nb-disabled', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-enabled'"
          },
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": "nb.block"
          }
        ],
        "description": {
          "full": "<p>Reset disabled state</p>",
          "summary": "<p>Reset disabled state</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "enable: function() {\n        this.$node.removeClass('_nb-is-disabled');\n        this.$body.slider('enable');\n        this.trigger('nb-enabled', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "Boolean"
            ],
            "description": ""
          }
        ],
        "description": {
          "full": "<p>Return state of the slider</p>",
          "summary": "<p>Return state of the slider</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isEnabled: function() {\n        return !this.$body.slider('option', 'disabled');\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-destroyed'"
          }
        ],
        "description": {
          "full": "<p>Destroy the slider</p>",
          "summary": "<p>Destroy the slider</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "destroy: function() {\n        if (this.$body && this.$body.data('uiSlider')) {\n            this.$body.slider('destroy');\n        }\n        this.trigger('nb-destroyed', this);\n        this.nbdestroy();\n    }\n}, 'base');"
      }
    ],
    "md": "<div class=\"code code_undefined\"><pre><code>    nb-slider()</code></pre></div><ul>\n<li>size: s</li>\n<li>value: 0</li>\n<li>orientation: horiz</li>\n<li>type: range</li>\n</ul>\n<h3 id=\"optional-attributes\">Optional attributes</h3>\n<ul>\n<li><code>&#39;size&#39;</code> {string} <code>m / s</code></li>\n<li><code>&#39;value&#39;</code> {number}</li>\n<li><code>&#39;id&#39;</code> {string} block@id</li>\n<li><code>&#39;class&#39;</code> {array} <code>[&#39;my_class1&#39;, &#39;my_class2&#39;]</code></li>\n<li><code>&#39;disabled&#39;</code> {boolean}</li>\n<li><code>&#39;content&#39;</code> {xml|string} — handle&#39;s content, can be string or <code>xml</code> <em>xss warning!</em></li>\n</ul>\n<h4 id=\"example\">Example</h4>\n<blockquote>\n<div example=\"slider-s\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-slider( {\n   'id': 's2'\n   'size': 's'\n   'handle': {\n       'class': 'js-custom-class'\n   }\n   'value': 20\n})</code></pre></div><div example=\"slider-m\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-slider({\n     'size': 'm'\n     'class': 'js-super-class'\n     'value': 50\n     'id': 's1'\n })</code></pre></div><div example=\"slider-d\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-slider(  {\n   'disabled': true()\n})</code></pre></div><div example=\"slider-c\"/>\n\n<div class=\"code code_yate\"><pre><code>nb-slider(  {\n    'id': 's3'\n    'size': 's'\n    'content':  nb-icon({\n           'icon': 'volume'\n       })\n})</code></pre></div></blockquote>\n"
  },
  {
    "block": "suggest",
    "jsdoc": [
      {
        "tags": [],
        "description": {
          "full": "<h3>jQuery UI Depends:</h3>\n<ul>\n<li>jquery.ui.autocomplete.js</li>\n<li>jquery.ui.button.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.widget.js</li>\n<li>jquery.ui.position.js</li>\n<li>jquery.ui.menu.js</li>\n</ul>\n",
          "summary": "<h3>jQuery UI Depends:</h3>\n<ul>\n<li>jquery.ui.autocomplete.js</li>\n<li>jquery.ui.button.js</li>\n<li>jquery.ui.core.js</li>\n<li>jquery.ui.widget.js</li>\n<li>jquery.ui.position.js</li>\n<li>jquery.ui.menu.js</li>\n</ul>\n",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "(function() {"
      },
      {
        "tags": [
          {
            "type": "namespace",
            "string": "jquery.ui.suggest"
          },
          {
            "type": "extends",
            "otherClass": "{jquery.ui.autocomplete}"
          },
          {
            "type": "description",
            "string": "     Саджест это блок сотоящий из инпута и выпадающего списка.\n     При вводе какого-либо значения в инпут это значение матчится на список\n     слов из источника данных, и подходящие элементы из исходного списка\n     показываются в выпадающем списке, в котором пользователь может выбрать\n     нужный ему элемент.\n     После выбора элемента значение инпута меняется на значение выбранного элемента\n\n     Поддерживаемые события:\n       nb-type – всплывает при вводе значения в инпут\n       nb-select – всплывает при выборе значения из саджеста\n       nb-keypress-enter – всплывает при нажатии на энетер и отсутвии саджеста"
          }
        ],
        "description": {
          "full": "<p>Саджест</p>",
          "summary": "<p>Саджест</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true
      },
      {
        "tags": [
          {
            "type": "description",
            "string": "    Эти опции могут быть определены в yate шаблонах при описании наноблока.\n    Опции можно менять в рантайме через событие setOption\n"
          },
          {
            "type": "example",
            "string": "    var sug = nb.find('#mysuggest');\n    sug.setOption({ 'source','http://mydomain.com/user/search'});\n"
          },
          {
            "type": "type",
            "types": [
              "Object"
            ]
          }
        ],
        "description": {
          "full": "<p>Опции инициализации саджеста</p>",
          "summary": "<p>Опции инициализации саджеста</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "var optionsSuggest = {",
        "ctx": {
          "type": "declaration",
          "name": "optionsSuggest",
          "value": "{",
          "string": "optionsSuggest"
        }
      },
      {
        "tags": [
          {
            "type": "description",
            "string": "См. http://api.jqueryui.com/autocomplete/#option-source "
          },
          {
            "type": "type",
            "types": [
              "(String",
              "Array",
              "Function)"
            ]
          }
        ],
        "description": {
          "full": "<p>Истоник данных</p>",
          "summary": "<p>Истоник данных</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "source: null,"
      },
      {
        "tags": [
          {
            "type": "type",
            "types": [
              "Number"
            ]
          }
        ],
        "description": {
          "full": "<p>Количество элеметов, при котором в выпадающем списке появляется скролл</p>",
          "summary": "<p>Количество элеметов, при котором в выпадающем списке появляется скролл</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "countMax: 10,"
      },
      {
        "tags": [
          {
            "type": "description",
            "string": "    Указывает из какого шаблона брать верстку для элемента выпадающего списка.\n    См. файл suggest.yate: match /[.type].item nb-suggest\n"
          },
          {
            "type": "type",
            "types": [
              "String"
            ]
          }
        ],
        "description": {
          "full": "<p>Тип саджеста</p>",
          "summary": "<p>Тип саджеста</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "type: 'default',"
      },
      {
        "tags": [
          {
            "type": "type",
            "types": [
              "Boolean"
            ]
          }
        ],
        "description": {
          "full": "<p>Включение или отключение выделения жирным начертанием результатов<br />матчинга в выпадающем списке.</p>",
          "summary": "<p>Включение или отключение выделения жирным начертанием результатов<br />матчинга в выпадающем списке.</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "highlight: false,"
      },
      {
        "tags": [
          {
            "type": "description",
            "string": "Применятся на размер элементов в выпадающем списке. "
          },
          {
            "type": "type",
            "types": [
              "String"
            ]
          }
        ],
        "description": {
          "full": "<p>Размер блока.</p>",
          "summary": "<p>Размер блока.</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "size: 's',"
      },
      {
        "tags": [],
        "description": {
          "full": "<p>Количесвто введенных символов, после которого начинать поиск слов</p>",
          "summary": "<p>Количесвто введенных символов, после которого начинать поиск слов</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "minLength: 2\n    };\n\n    $.widget(\"ui.suggest\", $.ui.autocomplete, {\n        options: optionsSuggest,\n\n        _renderMenu: function(ul, items) {\n            var that = this;\n            var html = '';\n\n            $.each(items, function(index, item) {\n                html += that._renderItem(item);\n            });\n\n            $(html).appendTo(ul);\n\n            ul.children('li').each(function(index) {\n                $(this).data(\"ui-autocomplete-item\", items[index]);\n            });\n        },\n\n        _renderItem: function(item) {\n            var clone = $.extend({}, item);\n\n            if (this.options.highlight) {\n                if (typeof highlightings[this.options.type] == 'function') {\n                    highlightings[this.options.type](clone, this._value());\n                } else if (typeof this.options.highlight == 'function') {\n                    this.options.highlight(clone, this._value());\n                }\n            }\n\n            clone.labelContent = clone.label;\n            delete clone.label;\n\n            var renderData = {\n                item: clone,\n                type: this.options.type,\n                size: this.options.size\n            };\n\n            if ($.isFunction(this.options.renderItem)) {\n                return this.options.renderItem(renderData);\n            } else {\n                return '<li><a href=\"#\">' + clone.labelContent + '</a></li>';\n            }\n        },\n\n        _suggest: function(items) {\n            this._super(items);\n\n            if (this.options.countMax && !this._heightMax) {\n                this._heightMax = this.menu.element.children().eq(0).height() * this.options.countMax;\n                this.menu.element.css({\n                    'max-height': this._heightMax,\n                    'overflow-y': 'auto',\n                    'overflow-x': 'hidden'\n                });\n            }\n        },\n\n        search: function(value, event) {\n            this._trigger('_search');\n\n            return this._super(value, event);\n        }\n    });\n\n    var highlightings = {\n        'default': function(item, term) {\n            var matcher = new RegExp('(' + $.ui.autocomplete.escapeRegex(term) + ')', \"i\");\n            item.label = item.label.replace(matcher, '<b>$1</b>');\n        },\n\n        'username': function(item, term) {\n            var matcher = new RegExp('(' + $.ui.autocomplete.escapeRegex(term) + ')', \"ig\");\n\n            item.usernameHighlighted = item.username.replace(matcher, '<span class=\"_nb-suggest-hl\">$1</span>');\n\n            if (typeof item.email == 'string') {\n                item.emailHighlighted = item.email.replace(matcher, '<span class=\"_nb-suggest-hl\">$1</span>');\n            }\n        }\n    };\n\n    nb.define('suggest', {"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-suggest_inited'"
          }
        ],
        "description": {
          "full": "<p>Init select</p>",
          "summary": "<p>Init select</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "oninit: function() {\n            var that = this;\n            var nodeTagName = this.$node[0].tagName.toLowerCase();\n\n            if (nodeTagName === 'input' || nodeTagName === 'textarea') {\n                this.$control = this.$node;\n            } else {\n                this.$control = this.$node.find('input');\n                this.input = this.children()[0];\n            }\n\n            var source = this.$node.data('source');\n\n            this.$control.on('keydown.nb-suggest', function(e) {\n                var keyCode = $.ui.keyCode;\n\n                if ($.inArray(e.keyCode, [ keyCode.ENTER, keyCode.NUMPAD_ENTER ]) !== -1) {\n                    if (!this.$jUI.data().uiSuggest.menu.active) {\n                        this.trigger('nb-keypress-enter', this, this.getValue());\n                    }\n                }\n            }.bind(this));\n\n            this.$jUI = this.$control.suggest({\n                source: source,\n                countMax: this.$node.data('countMax'),\n                type: this.$node.data('type'),\n                size: this.$node.data('size'),\n                highlight: this.$node.data('highlight'),\n                minLength: this.$node.data('minLength'),\n                renderItem: function(data) {\n                    return yr.run(that.getYateModuleName(), data, 'nb-suggest');\n                }\n            });\n\n            this.$suggest = this.$jUI.data().uiSuggest.menu.element;\n\n            this.$suggest.addClass(this.$node.data('class-suggest'));\n\n            this.$jUI.on('suggest_search.nb-suggest', function() {\n                this.trigger('nb-type', this, this.getValue());\n            }.bind(this));\n\n            this.$jUI.on('suggestselect.nb-suggest', function(e, item) {\n                this.$selected = item.item;\n                this.trigger('nb-select', this, item.item);\n            }.bind(this));\n\n            this.trigger('nb-inited', this);\n        },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "Object"
            ],
            "description": ""
          }
        ],
        "description": {
          "full": "<p>Get selected item from suggest</p>",
          "summary": "<p>Get selected item from suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getSelected: function() {\n            return this.$selected;\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "Object"
            ],
            "name": "option",
            "description": "`{ name: value }` имя и значение опции"
          },
          {
            "type": "fires",
            "string": "'nb-option-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Sets option to the jUI widget<br /><a href=\"http://api.jqueryui.com/autocomplete/#method-option\">http://api.jqueryui.com/autocomplete/#method-option</a></p>",
          "summary": "<p>Sets option to the jUI widget<br /><a href=\"http://api.jqueryui.com/autocomplete/#method-option\">http://api.jqueryui.com/autocomplete/#method-option</a></p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setOption: function(option) {\n            this.$jUI.suggest('option', option);\n            this.trigger('nb-option-set', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "option",
            "description": ""
          },
          {
            "type": "returns",
            "string": "{String} option value"
          }
        ],
        "description": {
          "full": "<p>Gets option of the jUI widget<br /><a href=\"http://api.jqueryui.com/autocomplete/#method-option\">http://api.jqueryui.com/autocomplete/#method-option</a></p>",
          "summary": "<p>Gets option of the jUI widget<br /><a href=\"http://api.jqueryui.com/autocomplete/#method-option\">http://api.jqueryui.com/autocomplete/#method-option</a></p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getOption: function(option) {\n            return this.$jUI.suggest('option', option);\n        },"
      },
      {
        "tags": [
          {
            "type": "params",
            "string": "{Array} source New source"
          },
          {
            "type": "fires",
            "string": "'nb-source-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set new items for suggest</p>",
          "summary": "<p>Set new items for suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setSource: function(source) {\n            this.setOption({'source': source});\n            this.trigger('nb-source-set', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Array} source"
          }
        ],
        "description": {
          "full": "<p>Get items from suggest</p>",
          "summary": "<p>Get items from suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getSource: function() {\n            return this.getOption('source');\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-closed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Скрывает список предложений</p>",
          "summary": "<p>Скрывает список предложений</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "close: function() {\n            this.$jUI.suggest('close');\n            this.trigger('nb-closed', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-disabled'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Disables the suggest</p>",
          "summary": "<p>Disables the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "disable: function() {\n            if (this.isEnabled()) {\n                if (this.input) {\n                    this.input.disable();\n                } else {\n                    this.$control.prop('disabled', true);\n                }\n                this.$node.addClass('_nb-is-disabled');\n                this.$jUI.suggest('disable');\n                this.trigger('nb-disabled', this);\n            }\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-enabled'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Enables the suggest</p>",
          "summary": "<p>Enables the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "enable: function() {\n            if (!this.isEnabled()) {\n                if (this.input) {\n                    this.input.enable();\n                } else {\n                    this.$control.prop('disabled', false);\n                }\n                this.$node.removeClass('_nb-is-disabled');\n                this.$jUI.suggest('enable');\n                this.trigger('nb-enabled', this);\n            }\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Boolean}"
          }
        ],
        "description": {
          "full": "<p>Return state of the suggest</p>",
          "summary": "<p>Return state of the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isEnabled: function() {\n            return !this.$node.hasClass('_nb-is-disabled');\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-focused'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Focus the suggest</p>",
          "summary": "<p>Focus the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "focus: function() {\n            if (this.isEnabled()) {\n                if (this.input) {\n                    this.input.focus();\n                } else {\n                    this.$control.focus();\n                }\n            }\n            this.trigger('nb-focused', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String|Object} name"
          }
        ],
        "description": {
          "full": "<p>Get name of the suggest</p>",
          "summary": "<p>Get name of the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getName: function() {\n            return this.$control.prop('name');\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "string"
            ],
            "name": "name",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-name-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set name of the suggest</p>",
          "summary": "<p>Set name of the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setName: function(name) {\n            this.$control.prop('name', name);\n            this.trigger('nb-name-set', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-blured'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Blur the suggest</p>",
          "summary": "<p>Blur the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "blur: function() {\n            if (this.isEnabled()) {\n                if (this.input) {\n                    this.input.blur();\n                } else {\n                    this.$control.blur();\n                }\n            }\n            this.trigger('nb-blured', this);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{String | Number}"
          }
        ],
        "description": {
          "full": "<p>Get current value of the suggest</p>",
          "summary": "<p>Get current value of the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getValue: function() {\n            return this.$control.val();\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-value-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Get current value of the suggest</p>",
          "summary": "<p>Get current value of the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setValue: function(value) {\n            if (this.isEnabled()) {\n                this.$control.val(value);\n                this.trigger('nb-value-set', this);\n            }\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "string",
              "number"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Search value in the source array and open suggest popup</p>",
          "summary": "<p>Search value in the source array and open suggest popup</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "search: function(value) {\n            this.$jUI.suggest(\"search\", value);\n            return this;\n        },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-destroyed'"
          }
        ],
        "description": {
          "full": "<p>Destroy the suggest</p>",
          "summary": "<p>Destroy the suggest</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "destroy: function() {\n            if (this.$control && this.$jUI) {\n                var jUIData = this.$jUI.data();\n                this.$control.off('.nb-suggest');\n                this.$jUI.off('.nb-suggest');\n                if (jUIData && jUIData.uiSuggest) {\n                    this.$jUI.suggest('destroy');\n                }\n            }\n            this.trigger('nb-destroyed', this);\n            this.nbdestroy();\n        }\n\n    }, 'base');\n\n})();"
      }
    ],
    "md": "<p>Suggest element.</p>\n<h3 id=\"options\">Options</h3>\n<ul>\n<li><code>&#39;id&#39;</code> {string}</li>\n<li><code>&#39;name&#39;</code> {string}</li>\n<li><code>&#39;attrs&#39;</code> {object} - attrubutes for suggest node</li>\n<li><code>&#39;attrsInput&#39;</code> {object} - attrubutes for input node</li>\n<li><code>&#39;disabled&#39;</code> {boolean}</li>\n<li><code>&#39;source&#39;</code>: {array} — source data for suggest</li>\n<li><code>&#39;highlight&#39;</code>: {boolean} — hightlight results or not</li>\n<li><code>&#39;size&#39;</code> {string}  - input size. <code>&#39;s&#39;</code> (no other sizes supported)</li>\n<li><code>&#39;countMax&#39;</code> {string}  - The number of elements in which the drop-down list appears scroll (default = 10)</li>\n<li><code>&#39;classSuggest&#39;</code> {string} — additional class for suggest popup</li>\n<li><code>&#39;content&#39;</code> {string} — initial content og suggest field</li>\n</ul>\n<h3 id=\"examples\">Examples</h3>\n<p>Простейший саджест с большим количеством вариантов. Введите буквы «Ва»</p>\n<blockquote>\n<div example=\"suggest\"/>                                                         \n\n<div class=\"code code_yate\"><pre><code>nb-suggest({\n  'source': '[\"Вариант 1\", \"Вариант 2\", \"Вариант 3\", \"Вариант 4\", \"Вариант 5\", \"Вариант 6\", \"Вариант 7\", \"Вариант 8\", \"Вариант 9\", \"Вариант 10\", \"Вариант 11\", \"Вариант 12\", \"Вариант 13\", \"Вариант 14\", \"Вариант 15\", \"Вариант 16\", \"Вариант 17\", \"Вариант 18\", \"Вариант 19\"]'\n  'highlight': true()\n  'size': 's'\n})</code></pre></div></blockquote>\n<p>Саджест с подсветкой, в котором представлена команда разработчиков Диска</p>\n<blockquote>\n<div example=\"suggestUser\"/>                                                         \n\n<div class=\"code code_yate\"><pre><code>nb-suggest({\n    'source': '[{{\"value\": \"Константин Константинович Константинопольский\",\"labelContent\": \"Константин Константинович Константинопольский konstantin.konstantinopolsky\",\"username\": \"Константин Константинович Константинопольский\",\"email\": \"konstantin.konstantinopolsky@yandex-team.ru\"}},{{\"value\": \"Константин Васильев\",\"labelContent\": \"Константин Васильев mctep\",\"username\": \"Константин Васильев\",\"email\": \"mctep@yandex-team.ru\",\"userpic\": \"https://center.yandex-team.ru/api/v1/user/mctep/avatar/54.jpg\"}},{{\"value\": \"Евгений Дорошенко\",\"labelContent\": \"Евгений Дорошенко esdoroshenko\",\"username\": \"Евгений Дорошенко\",\"email\": \"esdoroshenko@yandex-team.ru\",\"userpic\": \"https://center.yandex-team.ru/api/v1/user/esdoroshenko/avatar/54.jpg\"}},{{\"value\": \"Вадим Пацев\",\"labelContent\": \"Вадим Пацев basvasilich\",\"username\": \"Вадим Пацев\",\"email\": \"basvasilich@yandex-team.ru\",\"userpic\": \"https://center.yandex-team.ru/api/v1/user/basvasilich/avatar/54.jpg\"}},{{\"value\": \"Светлана Блыщак\",\"labelContent\": \"Светлана Блыщак sweetlush\",\"username\": \"Светлана Блыщак\",\"email\": \"sweetlush@yandex-team.ru\",\"userpic\": \"https://center.yandex-team.ru/api/v1/user/sweetlush/avatar/54.jpg\"}},{{\"value\": \"Яна Недоросткова\",\"labelContent\": \"Яна Недоросткова yanann11\",\"username\": \"Яна Недоросткова\",\"email\": \"yanann11@yandex-team.ru\",\"userpic\": \"https://center.yandex-team.ru/api/v1/user/yanann11/avatar/54.jpg\"}},{{\"value\": \"Азиз Йулдошев\",\"labelContent\": \"Азиз Йулдошев lapple\",\"username\": \"Азиз Йулдошев\",\"email\": \"lapple@yandex-team.ru\",\"userpic\": \"https://center.yandex-team.ru/api/v1/user/lapple/avatar/54.jpg\"}}]'\n    'highlight': true()\n    'type': 'username'\n})</code></pre></div></blockquote>\n<p>Саджест, который ходит на сервер за demo/users.json.</p>\n<blockquote>\n<div example=\"suggestUser2\"/> \n\n<div class=\"code code_yate\"><pre><code> nb-suggest({\n     'source': './users.json'\n     'type': 'username'\n })</code></pre></div></blockquote>\n"
  },
  {
    "block": "toggler",
    "jsdoc": [
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-inited'"
          }
        ],
        "description": {
          "full": "<p>Init the toggler</p>",
          "summary": "<p>Init the toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": true,
        "code": "oninit: function() {\n        this.$control = this.$node.find('._nb-toggler-checkbox');\n        this.trigger('nb-inited', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "value",
            "description": "of the check state"
          },
          {
            "type": "fires",
            "string": "'nb-value-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set value of the toggler</p>",
          "summary": "<p>Set value of the toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setValue: function(value) {\n        this.$control.attr('value', value);\n        this.trigger('nb-value-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "String"
            ],
            "description": "value"
          }
        ],
        "description": {
          "full": "<p>Returns value of the toggler</p>",
          "summary": "<p>Returns value of the toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getValue: function() {\n        return this.$control.prop('value');\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-changed'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Toggle to the oppocite value<br />Do nothing if toggler is disabled</p>",
          "summary": "<p>Toggle to the oppocite value<br />Do nothing if toggler is disabled</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "toggle: function() {\n        if (this.isEnabled()) {\n            if (this.isChecked()) {\n                this.uncheck();\n            } else {\n                this.check();\n            }\n            this.trigger('nb-changed', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "return",
            "types": [
              "String"
            ],
            "description": "value"
          }
        ],
        "description": {
          "full": "<p>Returns name of the toggler</p>",
          "summary": "<p>Returns name of the toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "getName: function() {\n        return this.$control.attr('name');\n    },"
      },
      {
        "tags": [
          {
            "type": "param",
            "types": [
              "String"
            ],
            "name": "value",
            "description": ""
          },
          {
            "type": "fires",
            "string": "'nb-name-set'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Set name of the toggler</p>",
          "summary": "<p>Set name of the toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "setName: function(value) {\n        this.$control.attr('name', value);\n        this.trigger('nb-name-set', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-disabled'"
          }
        ],
        "description": {
          "full": "<p>Disable toggler</p>",
          "summary": "<p>Disable toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "disable: function() {\n        this.$control.prop('disabled', true);\n        this.$node.addClass('_nb-is-disabled');\n        this.trigger('nb-disabled', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-enabled'"
          }
        ],
        "description": {
          "full": "<p>Enable toggler</p>",
          "summary": "<p>Enable toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "enable: function() {\n        this.$control.prop('disabled', false);\n        this.$node.removeClass('_nb-is-disabled');\n        this.trigger('nb-enabled', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Boolean}"
          }
        ],
        "description": {
          "full": "<p>Return enable state of the toggler</p>",
          "summary": "<p>Return enable state of the toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isEnabled: function() {\n        return !this.$control.prop('disabled');\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-focused'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Focus the input</p>",
          "summary": "<p>Focus the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "focus: function() {\n        if (this.isEnabled()) {\n            if (!this.$node.hasClass('_nb-is-focused')) {\n                this.$node.addClass('_nb-is-focused').focus();\n                this.focused = true;\n                this.$control.focus();\n                this.trigger('nb-focused', this);\n            }\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-blured'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Blur the input</p>",
          "summary": "<p>Blur the input</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "blur: function() {\n        this.$node.removeClass('_nb-is-focused').blur();\n        this.focused = false;\n        this.trigger('nb-blured', this);\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "returns",
            "string": "{Boolean}"
          }
        ],
        "description": {
          "full": "<p>Return check state of the toggler</p>",
          "summary": "<p>Return check state of the toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "isChecked: function() {\n        return this.$control.prop('checked');\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-checked'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Checking toggler</p>",
          "summary": "<p>Checking toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "check: function() {\n        if (this.isEnabled() && !this.isChecked()) {\n            this.$control.prop({\n                'checked': true\n            });\n            this.$node.addClass('_nb-is-checked');\n            this.trigger('nb-checked', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-unchecked'"
          },
          {
            "type": "returns",
            "string": "{Object} nb.block"
          }
        ],
        "description": {
          "full": "<p>Unchecking toggler</p>",
          "summary": "<p>Unchecking toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "uncheck: function() {\n        if (this.isEnabled() && this.isChecked()) {\n            this.$control.prop({\n                'checked': false\n            });\n            this.$node.removeClass('_nb-is-checked');\n            this.trigger('nb-unchecked', this);\n        }\n        return this;\n    },"
      },
      {
        "tags": [
          {
            "type": "fires",
            "string": "'nb-destroyed'"
          }
        ],
        "description": {
          "full": "<p>Destroy the toggler</p>",
          "summary": "<p>Destroy the toggler</p>",
          "body": ""
        },
        "isPrivate": false,
        "ignore": false,
        "code": "destroy: function() {\n        this.trigger('nb-destroyed', this);\n        this.nbdestroy();\n    }\n}, 'base');"
      }
    ],
    "md": "<h2 id=\"yate\">Yate</h2>\n<h3 id=\"default-toggler\">Default toggler</h3>\n<ul>\n<li>leftText — On</li>\n<li>rightText — Off</li>\n<li>size — s</li>\n</ul>\n<h3 id=\"optional-settings\">Optional settings</h3>\n<ul>\n<li><code>&#39;id&#39;</code> {string}</li>\n<li><code>&#39;name&#39;</code> {string}</li>\n<li><code>&#39;disabled&#39;</code> {boolean}</li>\n<li><code>&#39;checked&#39;</code> {boolean}</li>\n<li><code>&#39;leftText&#39;</code> {string} &#39;On&#39;</li>\n<li><code>&#39;rightText&#39;</code> {string} &#39;Off&#39;</li>\n</ul>\n<h3 id=\"example\">Example</h3>\n<blockquote>\n<div example=\"toggler-s\"/> \n\n<div class=\"code code_yate\"><pre><code>nb-toggler({\n    'leftText': 'On'\n    'rightText': 'Off'\n})</code></pre></div><div example=\"toggler-m\"/> \n\n<div class=\"code code_yate\"><pre><code>nb-toggler({\n    'leftText': 'On'\n    'rightText': 'Off'\n    'size': 'm'\n    'checked': true()\n})</code></pre></div><div example=\"toggler-xs\"/> \n\n<div class=\"code code_yate\"><pre><code> nb-toggler({\n     'leftText': 'On'\n     'rightText': 'Off'\n     'size': 'xs'\n })</code></pre></div><div example=\"toggler-d\"/> \n\n<div class=\"code code_yate\"><pre><code> nb-toggler({\n         'leftText': 'On'\n         'rightText': 'Off'\n         'size': 'm'\n         'disabled': true()\n})</code></pre></div></blockquote>\n"
  }
]